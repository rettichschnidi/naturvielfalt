<?php

/**
 * @file datatable.module
 * @author Ramon Gamma, 2012
 * @copyright 2012 Naturwerk, Brugg
 */

/**
 * these constants define the different image-sources
 * for the datatable_gallery addon.
 */
define('DATATABLE_IMGSRC_BELEG', 1);
define('DATATABLE_IMGSRC_PORTRAIT',2);
define('DATATABLE_IMGSRC_BELEG_PORTRAIT',3);
define('DATATABLE_IMGSRC_PORTRAIT_BELEG',4);

/**
 * Implements hook_theme()
 *
 * @return an array with theme template information
 */

function datatable_theme() {
	return array(
			'datatable' => array(
					'template' => 'datatable',
					'variables' => array(
							// id of html table element
							'id_table' => NULL,
							// header of tables with a json URL
							'header' => NULL,
							// content of table similar to table theme
							'rows' => NULL,
							// height and width of displayed datatable in pixel
							'tableWidth' => NULL,
							'tableHeight' => NULL,
							'len' => NULL,
							// Array of options to be set for the jquery datatable plugin where the key is the option name and the value is the javascript value as a string
							'options' => NULL,
							'dbFields' => NULL,
							// Table title
							'title' => NULL
					),
			),
	);
}

/**
 * Gets a total recordcount from a SQL statement with the count() function
 * 
 * 
 * @param $sql array Complete SQL Statement
 * @param $arguments array
 * 			Values for the query
 * @return
 * 		 Totalrecordcount of the give sql statement
 */
function datatable_dbRecordCount($sql, $arguments = array()) {
	
	$sql = "SELECT COUNT(*) FROM (".$sql.") AS SUB";
	
	/* Data set length after filtering */
	$fullResult = db_query($sql, $arguments);
	$fullRecordsCount = $fullResult->fetchField(0);
	
	return intval($fullRecordsCount);
	
}

/**
 * Function for other modules to progress the data from the db to the json
 * Fields from and for http://datatables.net
 * $_Request is used for filtering
 *
 * @note Some values get submitted from flexigrid via POST:
 * 	- sortname	Name of the colomn to be sorted at
 * 	- sortorder Sortoder (asc or desc)
 * 	- query		The phrase searched for (will be used case insensitive)
 * 	- page		Which page to show in case there are more elements than
 * 				showable on one page.
 * 	- rp		Number of elements to return (per page)		
 *
 * @param $sql array
 * 			'dbPreStatement'	optional: Statement which will be executed before anything else. Usefull to create temporary views.
 * 			'dbColumns' 		Array of columns
 * 			'dbSearchColumns' 	Array of columns that can be searched with the like command (no 'counts' or 'id'(bigint)
 * 			'dbSortColumns'		optional; Array of column on that can be sorted
 * 			'dbTable' 			String db table
 * 			'dbJoins' 			optional; the joins String (including all JOIN statements)
 * 			'dbGroupBy' 		optional; the GROUP BY string
 * 			'dbWhere' 			optional; the WHERE statement string
 * 			'id' 				optional: id column, default 'id'
 * 			'acl_level'			optional: Required acl level. For valid values, have a look at the c_acl module (file c_acl.base.inc)
 *			'dbDefaultOrder'	optional: When no sorting given via AJAX, use this one
 *
 *			Default values:
 * 			$sql['dbPreStatement'] = '';
 * 			$sql['dbColumns'] = array();
 * 			$sql['dbSearchColumns'] = array();
 * 			$sql['dbSortColumns'] = array();
 * 			$sql['dbTable'] = '';
 * 			$sql['dbJoins'] = '';
 * 			$sql['dbGroupBy'] = '';
 * 			$sql['dbWhere'] = '';
 * 			$sql['id] = 'id';
 * 			$sql['acl_level'] = 'ACL_READ';
 * 			$sql['dbDefaultOrder'] = NULL;
 *
 * @param $arguments array
 * 			Values for the query
 * 
 * @param $preArguments array
 * 			Values for the dbPreStatement statement
 * 
 * @return Array
 * 			[sEcho] => Site which is show
 * 			[iTotalRecords] => Total records without filtering
 * 			[iTotalDisplayRecords] => found records with filtering
 * 			[aaData] => Array of filtered and limited data from db as dbfields
 * @note If you do not like this (and you wont like it), do it better and shut up.
 * @note ALL VALUES DO NOT GET FILTERED BY FILTER_XSS() OR CHECK_PLAIN() - PLEASE MAKE DAMMN SURE THAT YOU ONLY PRINT VALUES
 * WHICH GOT FILTERED AHEAD!
 */
function datatable_dbRequest($sql, $arguments = array(), $preArguments = array()) {

	/* Set the db fields to select */
	if (!$sql['dbColumns'] || !$sql['dbTable'])
		return "Error! No dbColumns or dbTable";
	assert(isset($sql['dbSearchColumns']));
	$aColumns = $sql['dbColumns'];
	if (isset($sql['dbPreStatement'])) {
		if (false) {
			$noopeningbrakets = str_replace('{', 'drupal_', $sql['dbPreStatement']); // FIXME
			$noclosingbrakets = str_replace('}', '', $noopeningbrakets);
			print "<pre>" . $noclosingbrakets . "</pre>";
		}
		db_query($sql['dbPreStatement'], $preArguments);
	}
	if (!isset($sql['acl_level'])) {
		$sql['acl_level'] = 'ACL_READ';
	}

	$searchColumns = $sql['dbSearchColumns'];
	$sortColumns = isset($sql['dbSortColumns']) ? $sql['dbSortColumns'] : $sql['dbColumns'];
	
	$idColumn = isset($sql['id']) ? $sql['id'] : "id";

	/* DB table to use */
	$Table = $sql['dbTable'];

	/* Joins to use */
	$sJoins = '';
	if (isset($sql['dbJoins'])) {
		$sJoins = $sql['dbJoins'];
	}

	/* Group */
	$sGroupBy = '';
	if (isset($sql['dbGroupBy'])) {
		$sGroupBy = ' GROUP BY ' . $sql['dbGroupBy'];
	}

	isset($sql['dbWhere']) ? $where = 'WHERE ' . $sql['dbWhere'] : $where = '';
	
	/*
	 *  Check for permission if acl_id is in the columns array
	 */
	global $user;
	if (!check_admin_permission($user->uid)) {
		foreach ($aColumns as $dbColumn) {
			$matches = array();
			if (preg_match('/(\w+\.acl_id)/i', $dbColumn, $matches)) {
				$obs_acl_id = $matches[1];
				$minLevel = variable_get($sql['acl_level']);
				
				$where .= empty($where) ? 'WHERE' : ' AND';
				// level of ALL group
				$sJoins .= ' LEFT JOIN {acl_sgroup} ag ON ag.acl_id = ' . $obs_acl_id;
				$where .= ' ( (ag.sgroup_id = ' . variable_get('ACL_GROUP_ALL_ID')
					.' AND ag.level >= ' . $minLevel . ')';
				// level of user group
				$sJoins .= ' LEFT JOIN {sgroup} g ON g.id = ag.sgroup_id';
				$where .= ' OR (au.acl_id = g.acl_id'
					.' AND ag.level >= ' . $minLevel . ')';
				// level of user, table also needed for user group
				$sJoins	.= ' LEFT JOIN {acl_users} au ON au.users_id = ' . $user->uid;
				$where .= ' OR (au.acl_id = ' . $obs_acl_id
					.' AND au.level >= ' . $minLevel . ') )';
				
				break;
			}
		}
	}

	$sTable = $Table . " " . $sJoins . " ";
	
	if (isset($_REQUEST['qtype']) && !empty($_REQUEST['qtype'])) {
		$qtype = pg_escape_string($_REQUEST['qtype']);
	}
	if (isset($_REQUEST['query']) && !empty($_REQUEST['query'])) {
		if (!is_string($_REQUEST['query']))
			return "Error! Query not a string";
		$query = pg_escape_string($_REQUEST['query']);
	}
	/*
	 * Filtering
	 * NOTE this does not match the built-in DataTables filtering which does it
	 * word by word on any field. It's possible to do here, but concerned about efficiency
	 * on very large tables, and MySQL's regex functionality is very limited
	 */
	($where == "") ? $sWhere = "" : $sWhere = $where . "";
	if (isset($query) && $query != "" && isset($qtype) && $qtype != "") {
		if ($qtype == "*") {
			($sWhere == "") ? $sWhere = "WHERE (" : $sWhere .= " AND (";
			for ($i = 0; $i < count($searchColumns); $i++) {
				/**
				 * yes, this is a terrible hack, but I do not know how another solution to make sure
				 * that all(?!) types can be used with LIKE
				 */
				$sWhere .= "CAST(" . $searchColumns[$i]
						. " AS TEXT) ILIKE CAST('%$query%' AS TEXT) OR ";
			}
			$sWhere = substr_replace($sWhere, "", -3);
			$sWhere .= ')';
		} else
			$sWhere = "WHERE CAST(" . (string) $qtype . " AS TEXT) ILIKE CAST('%" . (string) $query
					. "%' AS TEXT)";
	}
	
	/*
	 * Ordering
	 */
	$sortOrders = array(
			'asc',
			'desc'
	);
	if (isset($_REQUEST['sortname']) && !empty($_REQUEST['sortname'])) {
		foreach ($sortColumns as $sortColumn) {
			if (strpos($sortColumn, $_REQUEST['sortname']) !== false) {
				$sortname = pg_escape_string($_REQUEST['sortname']);
				break;
			}
		}
		if (!isset($sortname))
			return 'Error! Sortname not possible. "' . $sortname . '" is not in ' . implode(', ', $sortColumns);
	}
	if (isset($_REQUEST['sortorder'])) {
		$sortorder = strtolower($_REQUEST['sortorder']);
		if (!in_array($sortorder, $sortOrders))
			return "Error! Sortorder not possible";
		$sortorder = pg_escape_string($sortorder);
	}
	$sOrder = 'ORDER BY ';
	if (isset($sortname)) {
		$sOrder .= $sortname. ' ' . $sortorder . ', ';
	} else if (isset($sql['dbDefaultOrder']) && !empty($sql['dbDefaultOrder'])) {
		$sOrder .= $sql['dbDefaultOrder'] . ', ';
	}
	$sOrder .= $idColumn . ' desc';

	/*
	* SQL queries
	* Get data to display
	*/
	$columnsString = str_replace(" , ", " ", implode(", ", $aColumns));
	$fullQuery = "SELECT DISTINCT $columnsString FROM $sTable $sWhere $sGroupBy $sOrder";

	$numberOfAccessibleRows = datatable_dbRecordCount($fullQuery, $arguments);
	
	/*
	 * Paging
	*/
	if (isset($_POST['page'])) {
		$pageNumber = (int) $_POST['page'];
		if ($pageNumber < 1)
			return "Error! Pagevalue '$pageNumber' is smaller than 1.";
	}
	else
		$pageNumber = 1;
	
	if (isset($_REQUEST['rp'])) {
		$pagesize = (int) $_REQUEST['rp'];
		if ($pagesize < 1)
			return "Error! Pagesize < 1";
	}
	
	if (isset($pageNumber) && isset($pagesize)) {
		$offset = ($pageNumber - 1) * $pagesize;
	}
	else {
		$offset = 0;
		$pagesize = 100;
	}
	
	/*
	 * Add limit and offset to improve performance of query runtime
	 */
	$fullQuery .= " LIMIT $pagesize OFFSET $offset";
		
	/* Data set length after filtering */
	$fullResult = db_query($fullQuery, $arguments);
	$fullRecords = $fullResult->fetchAll();

	
	$output = array(
			'page' => $pageNumber,
			'total' => $numberOfAccessibleRows,
			'rows' => array()
	);


	foreach ($fullRecords as $aRow) {
		$row = get_object_vars($aRow);
		$output['rows'][] = array(
				'id' => $aRow->$idColumn,
				'cell' => $row
		);
	}

	return $output;
}

/**
 * returns the html-source (<img> tag and it's caption) for displaying an observation or organism image in the datatable-gallery addon
 * there are four different display states:
 *  - DATATABLE_IMGSRC_BELEG
 *  	--> shows one image of this observation
 *  - OBSERVATION_IMSGRC_PORTRAIT
 *  	--> shows one image of this organism
 *  - OBSERVATION_IMSGRC_BELEG_PORTRAIT
 *  	--> shows an image of this observation or if not available of the organism
 *  - OBSERVATION_IMSGSRC_PORTRAIT_BELEG
 *  	--> displays an image of the organism or if not available one of the observation
 *
 *  these states can be controlled using $_REQUEST['imagesource']. flexigrid
 *  sends this parameter in the ajax calls (only when the gallery_addon in the datatable is enabled)
 *
 * @param int $observation_id the id of this observation or NULL if not existent
 * @param int $organism_id the id of this organism
 * @param array $display_data an array containing two sub-array with the keys "icons" and "data"
 * 		  example: array(
 * 						'icons' => array('<a href="">editicon...</a>', ...),
 * 						'data' => array('Flora', 'Solidago Gigantea', 'Goldrute...')
 * 				   )
 * 		  the icons and data row are displayed below the image
 * @paramt int $observation_aclId the acl_id of this observation. this controls, whether an edit link is displayed
 * @param array $images an array of observation images for this observation_id. if you have already search for $images, pass them in to prevent multiple selects
 * @param int $default_image_source the default state/imagesource that should be used, if $_REQUEST['imagesource'] is not set
 */
function datatable_get_gallery_image($observation_id, $organism_id, $display_data, $observation_aclId = NULL, $default_image_source=DATATABLE_IMGSRC_BELEG, $images = NULL){
	// search for a valid state or set the default
	$state = (isset($_REQUEST['imagesource'])
			&& $_REQUEST['imagesource'] <= DATATABLE_IMGSRC_PORTRAIT_BELEG
			&& $_REQUEST['imagesource'] >= DATATABLE_IMGSRC_BELEG
	)
	? $_REQUEST['imagesource'] : $default_image_source;

	// get the number of images for this observation and organism
	$images_observation = ($images == NULL) ? array( 'count' => 0) : $images;
	if($images == NULL && $state != DATATABLE_IMGSRC_PORTRAIT && $observation_id != NULL){
		$images_observation = gallery_images(GALLERY_MEDIATYPE_IMAGE, 'observation', $observation_id);
	}
	$images_organism = array( 'count' => 0);
	if($state == DATATABLE_IMGSRC_PORTRAIT // only search, if they are really needed
			|| $state == DATATABLE_IMGSRC_PORTRAIT_BELEG
			|| ($state == DATATABLE_IMGSRC_BELEG_PORTRAIT && $images_observation['count'] == 0)){
		$images_organism = gallery_images(GALLERY_MEDIATYPE_IMAGE, 'organismreference', $organism_id);
	}

	// has the user the right to upload pictures?
	$manage_obs_link = '';
	$manage_obs_url = false;
	if(observation_write_access_by_acl_id($observation_aclId)){
		$manage_obs_url = "/gallery/observation/$observation_id/images/edit";
		// proof = beleg ???
		$manage_obs_link = "<a href='$manage_obs_url'>" . t('add proof image') . "</a>";
	}

	$manage_org_image = '';
	$manage_org_url = false;
	if(user_access('organisms upload')){
		$manage_org_url = "/gallery/organismreference/$organism_id/images/edit";
		$manage_org_link = "<a href='$manage_org_url'>" . t('add portrait image') . "</a>";
	}

	// if there are no images, we display an empty div and some links
	if(($images_observation['count'] == 0 && $state == DATATABLE_IMGSRC_BELEG)
			|| ($images_organism['count'] == 0 && $state == DATATABLE_IMGSRC_PORTRAIT)
			|| ($images_observation['count'] == 0 && $images_organism['count'] == 0)){
		
		// disply an upload image link (if authorized)
		if($state == DATATABLE_IMGSRC_BELEG
				|| $state == DATATABLE_IMGSRC_BELEG_PORTRAIT ){
			$upload_link = $manage_obs_link;
		} else {
			$upload_link = $manage_org_link;
		}

		$result = <<<EOT
		<div class="datatable_gallery_no_image">
			<div class="datatable_gallery_no_image_info">
				<center>
				<img src="/sites/all/modules/datatable/images/no_photo.png" class="datatable_gallery_no_image"/><br/>
				$upload_link
				</center>
			</div>
		</div>
EOT;
	} else {
		// render a gallery of either the organism or the observation
		$gallery = array();
		$img_type_link = '#';
		if((($state == DATATABLE_IMGSRC_BELEG || $state == DATATABLE_IMGSRC_BELEG_PORTRAIT)
				&& $images_observation['count'] > 0)
				|| $images_organism['count'] == 0) {
			$gallery = gallery_list_renderer(GALLERY_MEDIATYPE_IMAGE, 'observation',$observation_id);
			$img = $gallery['edit']['gallery_list']['#images']['images'][0];
			$img_type_link = url(
					'gallery/' . $img['item_type'] . '/' . $img['item_id']
					. '/thumb/' . $img['id'] . '/gallery_large');
			
			$img_type = t('Proof image (@num_images)', array('@num_images' => $images_observation['count']));
			$img_add = t('add proof image');
			
			if($manage_obs_url)
				$img_add_link = $manage_obs_url;
			
		} else {
			$gallery = gallery_list_renderer(GALLERY_MEDIATYPE_IMAGE, 'organismreference',$organism_id);
			$img = $gallery['edit']['gallery_list']['#images']['images'][0];
			$img_type = t('Portrait image (@num_images)', array('@num_images' => $images_organism['count']));
			
			$img_type_link = url(
					'gallery/' . $img['item_type'] . '/' . $img['item_id']
					. '/thumb/' . $img['id'] . '/gallery_large');
			
			if($manage_org_url)
				$img_add_link = $manage_org_url;
			$img_add = t('add portrait image');
		}
		
		$entryID = $img['item_id'];
		
		//prepare other images (2-n) of an observation/organism to be ready to display in a lightbox
		$otherimages = array();
		for($i = 0 ; $i < count($gallery['edit']['gallery_list']['#images']['images']); $i++) {
			$tmp_img = $gallery['edit']['gallery_list']['#images']['images'][$i];
			$img_url = url(
					'gallery/' . $tmp_img['item_type'] . '/' . $tmp_img['item_id']
					. '/thumb/' . $tmp_img['id'] . '/gallery_large');
			
			//prepare caption
			$captionclass = "caption";
			$caption = '';
			if ($tmp_img['title'])
				$caption .= '<strong>' . $tmp_img['title'] . '</strong>';
			if ($tmp_img['description'])
				$caption .= ' <small>' . $tmp_img['description'] . '</small>';
			if ($caption)
				$caption = '<span class="title">' . $caption . '</span>';
			if ($tmp_img['location'] || $tmp_img['author'])
				$caption .= '<span class="author">&copy; ' . $tmp_img['author']
				. ($tmp_img['location'] ? ', ' . $tmp_img['location'] : '')
				. '</span>';
			
			//call_user_func_array leads somehow to problems: duplicate links, jquery selectors for lightbox not working correctly
// 			$types = _gallery_types();
// 			if (array_key_exists($tmp_img['item_type'], $types)
// 					&& array_key_exists(
// 							'image_caption',
// 							$types[$tmp_img['item_type']]))
				
// 				$caption .= ' <em>'
// 						. call_user_func_array(
// 								$types[$tmp_img['item_type']]['image_caption'],
// 								array($tmp_img['item_id'])) . '</em>';
			
			switch($tmp_img['item_type']) {
				case 'organismreference' :
					$caption .= ' <em>'
							. organism_reference_gallery_caption($tmp_img['item_id']);
					break;
				case 'observation' : 
					$caption .= ' <em>'
							. observation_gallery_caption($tmp_img['item_id']);
					break;
			}

			$imgfooter = '<div class="'
					. $captionclass . '">'
							. ($caption ? '<p class="captionText">' . $caption . '</p>'
									: '').'</div>';

			$otherimages[$i] = '<a href="'.$img_url.'">'.$imgfooter.'</a>';
		}
		$otherimages = implode('', $otherimages);
		
		//remove images from an entry n-2
		if(count($gallery['edit']['gallery_list']['#images']['images']) > 1) {
			$gallery['edit']['gallery_list']['#images']['images'] = array(
					$img
			);
		}
		$result = drupal_render($gallery['edit']['gallery_list']);
		
		$result = <<<EOT
		<div class="datatable_gallery_image_container">
			<div style="position: relative;">
				$result
				<span class="datatable_gallery_image_type">
					<a onclick="gallery_lightbox.openLightBoxEntry($entryID);" class="datatable_gallery_image_type">
						$img_type 
						<div name="lightbox_entry_$entryID" style="display:none;">
							$otherimages
						</div>
					</a>
				</span>
				<span class="datatable_gallery_image_add">
					<a href="$img_add_link" class="datatable_gallery_image_type">$img_add</a>
				</span>
			</div>
		</div>
EOT;
	}

	// now add the edit-icons and the data (scientific name, german name...)
	// to the result
	$first_data_row = '';
	$icons = '';
	$remaining_data = '';

	if(array_key_exists('data', $display_data) && count($display_data['data']) > 0){
		$first_data_row = $display_data['data'][0];
		for($i=1;$i<count($display_data['data']);$i++)
			$remaining_data .= '<br />' . $display_data['data'][$i];
	}

	if(array_key_exists('icons', $display_data) && is_array($display_data['icons'])){
		$icons = implode('&nbsp;', $display_data['icons']);
	}

	return <<<EOT
		$result
		<div class="datatable_gallery_info">
		$first_data_row
		<span class="datatable_gallery_icons">
		$icons
		</span>
		$remaining_data
		</div>
EOT;
}

/**
 * returns the html-source (<img> tag and it's caption) for displaying an area image in the datatable-gallery addon
 * there are four different display states:
 *
 * @param int $area_id the id of this area or NULL if not existent
 * @param array $display_data an array containing two sub-array with the keys "icons" and "data"
 * 		  example: array(
 * 						'icons' => array('<a href="">editicon...</a>', ...),
 * 						'data' => array('Flora', 'Solidago Gigantea', 'Goldrute...')
 * 				   )
 * 		  the icons and data row are displayed below the image
 * @param array $images an array of area images for this area. if you have already search for $images, pass them in to prevent multiple selects
 */
function datatable_get_gallery_area_image($area_id, $display_data, $images = NULL){
	
	// get the number of images for this area
	$area_images = ($images == NULL) ? array( 'count' => 0) : $images;
	if($images == NULL && $area_id != NULL){
		$area_images = gallery_images(GALLERY_MEDIATYPE_IMAGE, 'area', $area_id);
	}
	
	// has the user the right to upload pictures?
	$manage_area_link = '';
	$manage_area_url = false;
	if(area_write_access_by_id($area_id)){
		$manage_area_url = "/gallery/area/$area_id/images/edit";
		$manage_area_link = "<a href='$manage_area_url'>" . t('add area image') . "</a>";
	}


	// if there are no images, we display an empty div and some links
	if($area_images['count'] == 0) {
		$result = <<<EOT
		<div class="datatable_gallery_no_image">
			<div class="datatable_gallery_no_image_info">
				<center>
				<img src="/sites/all/modules/datatable/images/no_photo.png" class="datatable_gallery_no_image"/><br/>
				$manage_area_link
				</center>
			</div>
		</div>
EOT;
	} else {
		// render a gallery
		$gallery = array();
		$imgpe_link = '#';
		$gallery = gallery_list_renderer(GALLERY_MEDIATYPE_IMAGE, 'area',$area_id);
		$img = $gallery['edit']['gallery_list']['#images']['images'][0];
		$img_type_link = url(
				'gallery/' . $img['item_type'] . '/' . $img['item_id']
				. '/thumb/' . $img['id'] . '/gallery_large');
			
		$img_type = t('Area image (@num_images)', array('@num_images' => $area_images['count']));
		$img_add = t('add area image');
			
		$img_add_link = $manage_area_url;

		$entryID = $img['item_id'];

		//prepare other images (2-n) of an area to be ready to display in a lightbox
		$otherimages = array();
		for($i = 0 ; $i < count($gallery['edit']['gallery_list']['#images']['images']); $i++) {
			$tmp_img = $gallery['edit']['gallery_list']['#images']['images'][$i];
			$img_url = url(
					'gallery/' . $tmp_img['item_type'] . '/' . $tmp_img['item_id']
					. '/thumb/' . $tmp_img['id'] . '/gallery_large');
				
			//prepare caption
			$captionclass = "caption";
			$caption = '';
			if ($tmp_img['title'])
				$caption .= '<strong>' . $tmp_img['title'] . '</strong>';
			if ($tmp_img['description'])
				$caption .= ' <small>' . $tmp_img['description'] . '</small>';
			if ($caption)
				$caption = '<span class="title">' . $caption . '</span>';
			if ($tmp_img['location'] || $tmp_img['author'])
				$caption .= '<span class="author">&copy; ' . $tmp_img['author']
				. ($tmp_img['location'] ? ', ' . $tmp_img['location'] : '')
				. '</span>';
				
			//call_user_func_array leads somehow to problems: duplicate links, jquery selectors for lightbox not working correctly
			// 			$types = _gallery_types();
			// 			if (array_key_exists($tmp_img['item_type'], $types)
			// 					&& array_key_exists(
			// 							'image_caption',
			// 							$types[$tmp_img['item_type']]))

				// 				$caption .= ' <em>'
				// 						. call_user_func_array(
				// 								$types[$tmp_img['item_type']]['image_caption'],
				// 								array($tmp_img['item_id'])) . '</em>';

			$imgfooter = '<div class="'
					. $captionclass . '">'
							. ($caption ? '<p class="captionText">' . $caption . '</p>'
									: '').'</div>';

			$otherimages[$i] = '<a href="'.$img_url.'">'.$imgfooter.'</a>';
		}
		$otherimages = implode('', $otherimages);

		//remove images from an entry n-2
		if(count($gallery['edit']['gallery_list']['#images']['images']) > 1) {
			$gallery['edit']['gallery_list']['#images']['images'] = array(
					$img
			);
		}
		$result = drupal_render($gallery['edit']['gallery_list']);

		$result = <<<EOT
		<div class="datatable_gallery_image_container">
			<div style="position: relative;">
				$result
				<span class="datatable_gallery_image_type">
					<a onclick="gallery_lightbox.openLightBoxEntry($entryID);" class="datatable_gallery_image_type">
						$img_type
						<div name="lightbox_entry_$entryID" style="display:none;">
							$otherimages
						</div>
					</a>
				</span>
				<span class="datatable_gallery_image_add">
					<a href="$img_add_link" class="datatable_gallery_image_type">$img_add</a>
				</span>
			</div>
		</div>
EOT;
	}

	// now add the edit-icons and the data 
	// to the result
	$first_data_row = '';
	$icons = '';
	$remaining_data = '';

	if(array_key_exists('data', $display_data) && count($display_data['data']) > 0){
		$first_data_row = $display_data['data'][0];
		for($i=1;$i<count($display_data['data']);$i++)
			$remaining_data .= '<br />' . $display_data['data'][$i];
	}

	if(array_key_exists('icons', $display_data) && is_array($display_data['icons'])){
		$icons = implode('&nbsp;', $display_data['icons']);
	}

	return <<<EOT
		$result
		<div class="datatable_gallery_info">
		$first_data_row
		<span class="datatable_gallery_icons">
		$icons
		</span>
		$remaining_data
		</div>
EOT;
}
?>
