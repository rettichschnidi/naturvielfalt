<?php

/**********************************
 *  Hook implementations
 *********************************/

/**
 * Implements hook_theme()
 *
 * @return an array with theme template information
 */
function datatable_theme() {
	return array(
			'datatable' => array(
					'template' => 'datatable',
					'variables' => array(
							'id_table' => NULL,
							// id of html table element
							'header' => NULL,
							// header of table similar to table theme
							'rows' => NULL,
							// content of table similar to table theme
							'len' => NULL,
							// height of displayed datatable in pixel
							'options' => NULL, // Array of options to be set for the jquery datatable plugin where the key is the option name and the value is the javascript value as a string
							'dbFields' => NULL
					),
			),
	);
}


/**
 * Function for other modules to progress the data from the db to the json
 * Fields from and for http://datatables.net
 * $_Request is used for filtering
 *
 * @author Ramon Gamma, 2012
 *
 * @param array sql
 * 			'dbColumns' 		Array of columns
 * 			'dbSearchColumns' 	optimal; Array of columns that can be searched with the like command (no 'counts' or 'id'(bigint)
 * 									if empty dbColumns used
 * 			'dbSortColumns'		optimal; Array of column on that can be sortet
 * 			'dbTable' 			String db table
 * 			'dbJoins' 			optimal; the joins String
 * 			'dbGroupBy' 		optimal; the group by string
 * 			'dbWhere' 			optimal; the WHERE statenent string
 *
 * 			$sql['dbColumns'] = array();
 * 			$sql['dbSearchColumns'] = array();
 * 			$sql['dbSortColumns'] = array();
 * 			$sql['dbTable'] = "";
 * 			$sql['dbJoins'] = "";
 * 			$sql['dbGroupBy'] = "";
 * 			$sql['dbWhere'] = "";
 *
 * @return Array
 * 			[sEcho] => Site who is show
 * 			[iTotalRecords] => Total records without filtering
 * 			[iTotalDisplayRecords] => found records with filtering
 * 			[aaData] => Array of filtered and limited data from db as dbfields
 *
 */
function datatable_dbRequest($sql){

	/* Set the db fields to select */
	if(!$sql['dbColumns'] || !$sql['dbTable']) return "Error! No dbColumns or dbTable";

	$aColumns = $sql['dbColumns'];
	$searchColumns = $sql['dbSearchColumns']? $sql['dbSearchColumns'] : $sql['dbColumns'];
	$sortColumns = $sql['dbSortColumns'] ? $sql['dbSortColumns'] : $sql['dbColumns'];

	/* DB table to use */
	$Table = $sql['dbTable'];

	/* Joins to use */
	$sJoins = $sql['dbJoins'];

	/* Group */
	$sGroupBy = $sql['dbGroupBy'];

	$sql['dbWhere'] ? $where = "WHERE ".$sql['dbWhere'] : $where = "";

	$idColumn = $sql['id'];
	if($idColumn == "") $idColumn = "id";

	$sTable = $Table . " ". $sJoins ." ";

	$sortOrders = array('asc', 'desc');

	// Get posted data and check the variables
	if (isset($_POST['page'])) {
		$page = mysql_real_escape_string($_POST['page']);
		if($page < 1) return "Error! Page < 1";
	}
	if (isset($_POST['sortname'])) {
		$sortname = mysql_real_escape_string($_POST['sortname']);
		foreach ($sortColumns as $sortColumn) foreach(explode(".", $sortColumn) as $sortCol) $sortColumnsTemp[] = $sortCol;
		if(!is_int(array_search($sortname, $sortColumnsTemp))) return "Error! Sortname not possible";
	}
	if (isset($_POST['sortorder'])) {
		$sortorder = mysql_real_escape_string($_POST['sortorder']);
		if(!is_int(array_search($sortorder, $sortOrders))) return "Error! Sortorder not possible";
	}
// 	Not progressed, always search in all searchable columns
// 	if (isset($_POST['qtype'])) {
// 		$qtype = mysql_real_escape_string($_POST['qtype']);
// 	}
	if (isset($_POST['query'])) {
		$query = mysql_real_escape_string($_POST['query']);
		if(!is_string($query)) return "Error! Query not a string";
	}
	if (isset($_POST['rp'])) {
		$rp = mysql_real_escape_string($_POST['rp']);
		if($rp < 1) return "Error! pg < 1";
	}



	/*
	 * Paging
	*/
	$sLimit = "";
	if ( isset( $page ) && isset($rp) )
	{
		$pageStart = ($page-1)*$rp;

		$sLimit = " OFFSET ".$pageStart." LIMIT ".$rp;
	}


	/*
	 * Ordering
	*/
	if ( isset( $sortname ) )
	{
		$sOrder = "ORDER BY ".$sortname." ".$sortorder;
// 		for ( $i=0 ; $i<intval( $_REQUEST['iSortingCols'] ) ; $i++ )
// 		{
// 			if ( $_REQUEST[ 'bSortable_'.intval($_REQUEST['iSortCol_'.$i]) ] == "true" )
// 			{
// 				$sOrder .= $sortColumns[ intval( $_REQUEST['iSortCol_'.$i] ) ]."
// 						 	".mysql_real_escape_string( $_REQUEST['sSortDir_'.$i] ) .", ";
// 			}
// 		}

// 		$sOrder = substr_replace( $sOrder, "", -2 );
// 		if ( $sOrder == "ORDER BY" )
// 		{
// 			$sOrder = "";
// 		}
	}

	/*
	 * Filtering
	* NOTE this does not match the built-in DataTables filtering which does it
	* word by word on any field. It's possible to do here, but concerned about efficiency
	* on very large tables, and MySQL's regex functionality is very limited
	*/
	($where == "") ? $sWhere = "" : $sWhere = $where."";
	if ( $query != "" )
	{
		($sWhere == "") ? $sWhere = "WHERE (" : $sWhere .= " AND (";
		for ( $i=0 ; $i<count($searchColumns) ; $i++ )
		{
			$sWhere .= $searchColumns[$i]." LIKE '%".$query."%' OR ";
		}
		$sWhere = substr_replace( $sWhere, "", -3 );
		$sWhere .= ')';
	}


	/* Individual column filtering */
	// 	for ( $i=0 ; $i<count($aColumns) ; $i++ )
	// 	{
	// 		if ( $_REQUEST['bSearchable_'.$i] == "true" && $_REQUEST['sSearch_'.$i] != '' )
	// 		{
	// 			if ( $sWhere == "" )
	// 			{
	// 				$sWhere = "WHERE ";
	// 			}
	// 			else
	// 			{
	// 				$sWhere .= " AND ";
	// 			}
	// 			$sWhere .= $aColumns[$i]." LIKE '%".mysql_real_escape_string($_REQUEST['sSearch_'.$i])."%' ";
	// 		}
	// 	}


	/*
	 * SQL queries
	* Get data to display
	*/
	// removed SQL_CALC_FOUND_ROWS
	$nQuery = "SELECT  ".str_replace(" , ", " ", implode(", ", $aColumns))."
				FROM   $sTable $sWhere $sGroupBy $sOrder ";
	$sQuery = $nQuery." ". $sLimit;

	$rResult = db_query( $sQuery );

	/* Data set length after filtering */
	$nResult = db_query( $nQuery );
	$iFilteredTotal = $nResult->rowCount();

	/* Total data set length */
	$tQuery = "SELECT  ".str_replace(" , ", " ", implode(", ", $aColumns))."
				FROM   $sTable $where $sGroupBy $sOrder ";
	$rResultTotal = db_query( $tQuery );
	$iTotal = $rResultTotal->rowCount();

	$output = array(
			"page" => $page,
			"total" => $iFilteredTotal,
// 			"iTotalDisplayRecords" => $iFilteredTotal,
			"rows" => array()
	);

	$data = $rResult->fetchAll();
	foreach ( $data as $aRow )
	{
		$row = get_object_vars($aRow);
		$output['rows'][] = array (
							'id' => $row[$idColumn],
							'cell' => $row);
	}
// die(print_r($output));
	return $output;
}
?>