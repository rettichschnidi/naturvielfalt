<?php
/**********************************
 *  Hook implementations
 *********************************/

module_load_include('inc', 'observation');

// Load gallery integration
module_load_include('inc', 'observation', 'observation.gallery');
define('ACCESS_OBSERVATION', 'access observation');
define('CREATE_OBSERVATION', 'create observation');
define('UNKNOWN_ARTGROUP', 1000);
define('UNKNOWN_SPECIES', -1);

/**
 * Implements hook_menu()
 *
 * @return array
 */
function observation_menu() {
	// Show all observations
	$items['observation/show'] = array(
			'title' => 'Observations',
			'description' => 'Show all observations',
			'page callback' => 'observation_show_all_observations',
			'access arguments' => array(
					ACCESS_OBSERVATION
			),
			'type' => MENU_NORMAL_ITEM | MENU_DEFAULT_LOCAL_TASK,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
			'file' => 'observation.show.inc',
			'weight' => 1,
	);

	// Create a new observation
	$items['observation/new'] = array(
			'title' => 'Create',
			'description' => 'Create a new observation',
			'page callback' => 'observation_new',
			'access arguments' => array(
					CREATE_OBSERVATION
			),
			'type' => MENU_NORMAL_ITEM | MENU_LOCAL_TASK,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
			'file' => 'observation.inc',
			'weight' => 2,
	);
	
	// Display an observation
	$items['observation/%observation'] = array(
				'title' => 'Show',
				'description' => 'Display an observation',
				'page callback' => 'observation_show_observation',
				'page arguments' => array(
					1
				),
				'access arguments' => array(
					1
				),
				'access callback' => 'observation_read_access',
				'file' => 'observation.inc',
				'type' => MENU_SUGGESTED_ITEM,
				'weight' => 1
	);
	
	// Display an observation
	$items['observation/%observation/show'] = array(
			'title' => 'Show',
			'description' => 'Display an observation',
			'page callback' => 'observation_show_observation',
			'page arguments' => array(
					1
			),
			'access arguments' => array(
					1
			),
			'access callback' => 'observation_read_access',
			'file' => 'observation.inc',
			'type' => MENU_DEFAULT_LOCAL_TASK,
			'weight' => 1
	);
	
	// Display an observation
	$items['observation/%observation/inventory'] = array(
			'title' => 'Inventory',
			'description' => 'Display inventory of observation',
			'page callback' => 'observation_show_inventory',
			'page arguments' => array(
					1
			),
			'access arguments' => array(
					1
			),
			'access callback' => 'observation_check_inventory_access',
			'file' => 'observation.show.inc',
			'type' => MENU_LOCAL_TASK,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
			'weight' => -1
	);
	
	// Edit an observation
	$items['observation/%observation/edit'] = array(
			'title' => 'Edit',
			'description' => 'Edit an observation',
			'page callback' => 'observation_edit',
			'access arguments' => array(
					1
			),
			'page arguments' => array(
					1
			),
			'access callback' => 'observation_write_access',
			'file' => 'observation.inc',
			'type' => MENU_LOCAL_TASK,
			'weight' => 2
	);

	// Delete an observation
	$items['observation/%observation/delete'] = array(
			'title' => 'Delete',
			'description' => 'Delete an existing observation.',
			'page callback' => 'drupal_get_form',
			'page arguments' => array(
					'observation_delete_form',
					1
			),
			'access arguments' => array(
					1
			),
			'access callback' => 'observation_admin_access',
			'type' => MENU_LOCAL_TASK,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
			'file' => 'observation.delete.inc',
			'weight' => 99
	);

	// Delete one or many observations
	$items['observation/delete'] = array(
				'title' => 'ObservationsJSON',
				'description' => 'Delete one or many observations',
				'access callback' => TRUE,
				'page callback' => 'observation_delete',
				'file' => 'observation.ajax.inc',
				'type' => MENU_CALLBACK,	
	);
	
	// Save a new observation
	$items['observation/save'] = array(
			'title' => 'Save',
			'description' => 'Save a new observation',
			'page callback' => 'observation_save',
			'access arguments' => array(
					CREATE_OBSERVATION
			),
			'file' => 'observation.ajax.inc',
			'type' => MENU_CALLBACK,
	);
	
	// Update an observation
	$items['observation/%observation/save'] = array(
			'title' => 'Save',
			'description' => 'Save a existing observation',
			'page callback' => 'observation_save',
			'page arguments' => array(
					1
			),
			'access arguments' => array(
					1
			),
			'access callback' => 'observation_write_access',
			'file' => 'observation.ajax.inc',
			'type' => MENU_CALLBACK,
	);
	
	// Get geometry data for editing
	$items['observation/%observation/geometry/json'] = array(
			'title' => 'Geometry',
			'description' => 'Get geometry data for editing',
			'page callback' => 'observation_get_geometry_json',
			'page arguments' => array(
					1
			),
			'access arguments' => array(
					1
			),
			'access callback' => 'observation_read_access',
			'file' => 'observation.ajax.inc',
			'type' => MENU_CALLBACK,
	);
	
	// Get all geometry data to show
	$items['observation/geometry/json'] = array(
			'title' => 'Geometry',
			'description' => 'Get all geometry data to show',
			'page callback' => 'observation_get_geometry_json',
			'access arguments' => array(
					ACCESS_OBSERVATION
			),
			'file' => 'observation.ajax.inc',
			'type' => MENU_CALLBACK,
	);
	
	// Get all readable observations
	$items['observation/get/all'] = array(
			'title' => 'ObservationsJSON',
			'description' => 'Get readable observations',
			'page callback' => 'observation_get_all_json',
			'page arguments' => array(
					'ACL_READ'
			),
			'access arguments' => array(
					ACCESS_OBSERVATION
			),
			'file' => 'observation.ajax.inc',
			'type' => MENU_CALLBACK,
	);
	
	// Get all readable observations of given organism
	$items['observation/get/organism/%/all'] = array(
			'title' => 'ObservationsJSON',
			'description' => 'Get readable observations',
			'page callback' => 'observation_get_organism_json',
			'page arguments' => array(
					'ACL_READ',
					3
			),
			'access arguments' => array(
					ACCESS_OBSERVATION
			),
			'file' => 'observation.ajax.inc',
			'type' => MENU_CALLBACK,
	);
	
	// Get all own observations of given organism
	$items['observation/get/organism/%/own'] = array(
			'title' => 'ObservationsJSON',
			'description' => 'Get readable observations',
			'page callback' => 'observation_get_organism_json',
			'page arguments' => array(
					'own',
					3
			),
			'access arguments' => array(
					ACCESS_OBSERVATION
			),
			'file' => 'observation.ajax.inc',
			'type' => MENU_CALLBACK,
	);
	
	// Get all writeable observations of given organism
	$items['observation/get/organism/%/writeable'] = array(
			'title' => 'ObservationsJSON',
			'description' => 'Get readable observations',
			'page callback' => 'observation_get_organism_json',
			'page arguments' => array(
					'ACL_WRITE',
					3
			),
			'access arguments' => array(
					ACCESS_OBSERVATION
			),
			'file' => 'observation.ajax.inc',
			'type' => MENU_CALLBACK,
	);
	
	// Get all own observations
	$items['observation/get/own'] = array(
			'title' => 'ObservationsJSON',
			'description' => 'Get own observations',
			'page callback' => 'observation_get_all_json',
			'page arguments' => array(
					'own'
			),
			'access arguments' => array(
					ACCESS_OBSERVATION
			),
			'file' => 'observation.ajax.inc',
			'type' => MENU_CALLBACK
	);
	
	// Get all writeable observations
	$items['observation/get/writeable'] = array(
			'title' => 'Writeable Observations JSON',
			'description' => 'Get writeable observations',
			'page callback' => 'observation_get_all_json',
			'page arguments' => array(
					'ACL_WRITE'
			),
			'access arguments' => array(
					ACCESS_OBSERVATION
			),
			'file' => 'observation.ajax.inc',
			'type' => MENU_CALLBACK,
	);

	// Show some important information about an area. For usage in a infoWindow, ajax.
	$items['observation/%observation/overview/ajaxform'] = array(
			'title' => 'observation overview form',
			'page callback' => 'observation_overview_ajax_callback',
			'page arguments' => array(
					1
			),
			'access arguments' => array(
					1
			),
			'access callback' => 'observation_read_access',
			'type' => MENU_CALLBACK,
			'file' => 'observation.ajax.inc',
	);
	
	// Export one or many observations
	$items['observation/export'] = array(
			'title' => 'ObservationsJSON',
			'description' => 'Export one or many observations',
			'page callback' => 'observation_export',
			'access callback' => TRUE,
			'file' => 'observation.ajax.inc',
			'type' => MENU_CALLBACK
	);
	
	return $items;
}

/**
 * Default permission function
 *
 */
function observation_permission() {
	return array(
			ACCESS_OBSERVATION => array(
					'title' => t('can view observations'),
			),
			CREATE_OBSERVATION => array(
					'title' => t('can create observations'),
			),
	);
}

/**
 * Check if user has admin access to this observation
 *
 * @param array $observationdata
 * @return boolean true if access ok, false if not
 */
function observation_admin_access($observationdata = NULL) {
	if ($observationdata == NULL) {
		return false;
	}
	if (isset($observationdata['observation']['acl_id'])) {
		return check_permission(
			$observationdata['observation']['acl_id'],
			variable_get('ACL_ADMIN'));
	}
	return false;
}

function observation_any_access(){
	return true;
}

/**
 * Check if user has write access to this observation
 *
 * @param array $observationdata
 * @return boolean true if access ok, false if not
 */
function observation_write_access($observationdata = NULL) {
	if ($observationdata == NULL || empty($observationdata)) {
		return false;
	}
	if (isset($observationdata['observation']['acl_id'])) {
		return check_permission(
			$observationdata['observation']['acl_id'],
			variable_get('ACL_WRITE'));
	}
	return false;
}

/**
 * Check if user has write access to this observation
 * 
 * @param int $observation_id
 * @return boolean true if access ok, false if not
 */
function observation_write_access_by_id($observation_id = NULL) {
	if (isset($observation_id)) {
		$observationdata = observation_load($observation_id);
		return observation_write_access($observationdata);
	}
	return false;
}

/**
* Check if user has write access to this observation
*
* @param int $aclId
* @return boolean true if access ok, false if not
*/
function observation_write_access_by_acl_id($aclId = NULL) {
	if (isset($aclId)) {
		return check_permission(
		$aclId,
		variable_get('ACL_WRITE'));
	}
	return false;
}

/**
 * Check if user has read access to this observation
 *
 * @param array $observationdata
 * @return boolean true if access ok, false if not
 */
function observation_read_access($observationdata = NULL) {
	if ($observationdata == NULL || empty($observationdata)) {
		return false;
	}
	if (isset($observationdata['observation']['acl_id'])) {
		return check_permission(
			$observationdata['observation']['acl_id'],
			variable_get('ACL_READ'));
	}
	return false;
}

/**
 * Check if user of an observation also has access to the inventory of the observation
 *
 * @param array $observationdata
 * @return boolean true if access ok, false if not
 */
function observation_check_inventory_access($observationdata = NULL) {
	if($observationdata === NULL || !isset($observationdata['observation']['inventory_id'])) return false;
	if(!user_access(ACCESS_INVENTORY)) return false;
	else return inventory_read_access_by_id($observationdata['observation']['inventory_id']);
}

/**
 * Return an array with all required information about an observation.
 * This will be called for menuitems like this: 'observation/%observation/editgeometry'
 * @param string $arg
 * 		This string *should* acutally be an integer
 * @return array $observationdata
 */
function observation_load($arg) {
	$observationdata = array();
	if ($arg != NULL && ((int) $arg) > 0) {
		$observationdata = observation_get($arg);
	}
	return $observationdata;
}

/**
* Get count of all documents of an observation.
*
* @param int|array(int) $id
*   The ID (or an array of IDs) of the object.
* @return
*   Number of documents
*/
function observation_documents_count($id) {
	$select = db_select('observation_file_managed', 'ofm');
	$select->addExpression('COUNT(observation_id)', 'count');
	$conditions = db_and();
	if (is_array($id)) {
		$conditions->condition('ofm.observation_id', $id, "IN");
	} else {
		$conditions->condition('ofm.observation_id', $id);
	}
	$select->condition($conditions);
	$queryResult = $select->execute();
	$result = $queryResult->fetchField(0);
	return $result;
}

?>
