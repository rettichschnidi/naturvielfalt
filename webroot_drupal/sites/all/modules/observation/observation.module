<?php
/**********************************
 *  Hook implementations
 *********************************/

module_load_include('inc', 'observation');

// Load gallery integration
module_load_include('inc', 'observation', 'observation.gallery');

/**
 * Implements hook_menu()
 *
 * @return array
 */
function observation_menu() {
	$items['observation'] = array(
			'title' => t('Observation'),
			'description' => t('Show a overview of observations'),
			'page callback' => 'drupal_goto',
			'page arguments' => array(
					'singleobservation'
			),
			'access arguments' => array(
					'access observation'
			),
			'type' => MENU_CALLBACK,
	);
	$items['singleobservation'] = array(
			'title' => t('Show all singleobservations'),
			'description' => t('Display a wizard to add a new singleobservation'),
			'page callback' => 'observation_show_all_singleobservations',
			'access arguments' => array(
					'access observation'
			),
			'file' => 'observation.show.inc',
	);
	$items['singleobservation/%observation/show'] = array(
			'title' => t('Show'),
			'description' => t('Display a singleobservation'),
			'page callback' => 'observation_show_observation',
			'page arguments' => array(
					1
			),
			'access arguments' => array(
					1
			),
			'access callback' => 'observation_read_access',
			'file' => 'singleobservation.inc',
			'type' => MENU_LOCAL_TASK,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
			'weight' => 1
	);
	$items['singleobservation/%observation/edit'] = array(
			'title' => t('Edit'),
			'description' => t('Edit a singleobservation'),
			'page callback' => 'observation_edit',
			'access arguments' => array(
					1
			),
			'page arguments' => array(
					1
			),
			'access callback' => 'observation_write_access',
			'file' => 'observation.inc',
			'type' => MENU_LOCAL_TASK,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
			'weight' => 2
	);
// 	if (function_exists('gallery_list_renderer')) {
// 		$items['singleobservation/%/gallery'] = array(
// 				'title' => t('Gallery'),
// 				'description' => t('View the area as a gallery of organisms'),
// 				'page callback' => 'singleobservation_gallery',
// 				'page arguments' => array(
// 						1
// 				),
// 				'access arguments' => array(
// 						AREA_ACCESS
// 				),
// 				'type' => MENU_LOCAL_TASK,
// 				'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
// 				'file' => 'area.inc',
// 				'weight' => 3
// 		);
// 	}
	$items['singleobservation/%observation/permissions'] = array(
			'title' => t('Permission'),
			'description' => t('Edit the permission of this observation.'),
			'page callback' => 'observation_edit_acl',
			'page arguments' => array(
					1
			),
			'access arguments' => array(
					1
			),
			'access callback' => 'observation_admin_access',
			'type' => MENU_LOCAL_TASK,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
			'file' => 'observation.inc',
			'weight' => 4
	);
	$items['singleobservation/%observation/delete'] = array(
			'title' => t('Delete observation'),
			'description' => t('Delete an existing observation.'),
			'page callback' => 'drupal_get_form',
			'page arguments' => array(
					'observation_delete_form',
					1
			),
			'access arguments' => array(
					1
			),
			'access callback' => 'observation_admin_access',
			'type' => MENU_LOCAL_TASK,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
			'file' => 'observation.delete.inc',
			'weight' => 99
	);
	$items['singleobservation/new'] = array(
			'title' => t('Add a new singleobservation'),
			'description' => t('Display a form to add a new singleobservation'),
			'page callback' => 'singleobservation_new',
			'access arguments' => array(
					'create observation'
			),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'singleobservation.inc',
	);
// 	$items['singleobservation/new/multiple'] = array(
// 			'title' => t('Add new singleobservations'),
// 			'description' => t('Display a form to add multiple singleobservations'),
// 			'page callback' => 'singleobservation_new_multiple',
// 			'access arguments' => array(
// 					'create observation'
// 			),
// 			'type' => MENU_NORMAL_ITEM,
// 			'file' => 'singleobservation.inc',
// 	);
	$items['observation/save'] = array(
			'title' => t('Save'),
			'description' => t('Save a new observation'),
			'page callback' => 'observation_save',
			'access arguments' => array(
					'create observation'
			),
			'file' => 'observation.ajax.inc',
			'type' => MENU_CALLBACK,
	);
	$items['observation/%observation/save'] = array(
			'title' => t('Save'),
			'description' => t('Save a existing observation'),
			'page callback' => 'observation_save',
			'page arguments' => array(
					1
			),
			'access arguments' => array(
					1
			),
			'access callback' => 'observation_write_access',
			'file' => 'observation.ajax.inc',
			'type' => MENU_CALLBACK,
	);
	$items['observation/%observation/geometry/json'] = array(
			'title' => t('Geometry'),
			'description' => t('Get geometry data for editing'),
			'page callback' => 'observation_get_geometry_json',
			'page arguments' => array(
					1
			),
			'access arguments' => array(
					'access observation'
			),
			'file' => 'observation.ajax.inc',
			'type' => MENU_CALLBACK,
	);
	$items['singleobservation/geometry/json'] = array(
			'title' => t('Geometry'),
			'description' => t('Get all geometry data to show'),
			'page callback' => 'observation_get_geometry_json',
			'access arguments' => array(
					'access observation'
			),
			'file' => 'observation.ajax.inc',
			'type' => MENU_CALLBACK,
	);
	$items['observation/get/all'] = array(
			'title' => t('Obse4rvationsJSON'),
			'description' => t('Get all observations'),
			'page callback' => 'observation_get_all_json',
			'access arguments' => array(
					'create observation'
			),
			'file' => 'observation.ajax.inc',
			'type' => MENU_CALLBACK,
	);
	$items['observation/deleteCustomAttribute/%'] = array(
			'title' => t('Delete Attribute'),
			'description' => t('Delete a custom attribute'),
			'page callback' => 'observation_delete_custom_attribute',
			'page arguments' => array(
					2
			),
			'access arguments' => array(
					'create observation'
			),
			'type' => MENU_CALLBACK,
			'file' => 'observation.ajax.inc',
	);
	return $items;
}




/**
 * Default permission function
 *
 */
function observation_permission() {
	return array(
			'access observation' => array(
					'title' => t('can view observations'),
			),
			'create observation' => array(
					'title' => t('can create observations'),
			),
	);
}

/**
 * Check if user has admin access to this observation
 *
 * @param array $observationdata
 * @return boolean true if access ok, false if not
 * @todo Implementation
 */
function observation_admin_access($observationdata = NULL) {
	if ($observationdata == NULL) {
		return false;
	}
	if (isset($observationdata['observation']['acl_id'])) {
		return check_permission($observationdata['observation']['acl_id'], variable_get('ACL_ADMIN'));
	}
	return false;
}

/**
 * Check if user has write access to this observation
 *
 * @param array $observationdata
 * @return boolean true if access ok, false if not
 * @todo Implementation
 */
function observation_write_access($observationdata = NULL) {
	if ($observationdata == NULL || empty($observationdata)) {
		return false;
	}
	if (isset($observationdata['observation']['acl_id'])) {
		return check_permission($observationdata['observation']['acl_id'], variable_get('ACL_WRITE'));
	}
	return false;
}

/**
 * Check if user has read access to this observation
 *
 * @param array $observationdata
 * @return boolean true if access ok, false if not
 * @todo Implementation
 */
function observation_read_access($observationdata = NULL) {
	if ($observationdata == NULL || empty($observationdata)) {
		return false;
	}
	if (isset($observationdata['observation']['acl_id'])) {
		return check_permission($observationdata['observation']['acl_id'], variable_get('ACL_READ'));
	}
	return false;
}

/**
 * Return an array with all required information about an observation.
 * This will be called for menuitems like this: 'observation/%observation/editgeometry'
 * @param string $arg
 * 		This string *should* acutally be an integer
 * @return array $observationdata
 */
function observation_load($arg) {
	$observationdata = array();
	if ($arg != NULL && ((int)$arg) > 0) {
		$observationdata = observation_get($arg);
	}
	return $observationdata;
}

?>
