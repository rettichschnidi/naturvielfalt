<?php
/**
 * @file organism.module
 * @author Marco Zimmerli, 2011
 * @author Reto Schneider, 2012
 * @copyright 2011-2012 Naturwerk, Brugg
 */
/**********************************
 *  Hook implementations
 *********************************/

define('ORGANISMS_ACCESS', 'organisms access content');
define('ORGANISMS_UPLOAD', 'organisms upload');

// Load gallery integration
module_load_include('inc', 'organism', 'organism.gallery');

/**
 * Implements hook_theme()
 *
 * publishes our template
 * @return an array with theme template information
 */
function organism_theme() {
	return array(
			'showcase_block' => array(
					'template' => 'organism_page',
					'variables' => array(
							'item' => NULL
					)
			)
	);
}

/**
 * Implements hook_menu()
 *
 * This makes it possible to visit the link example.com/organism.
 * It is also possible to create an URL like example.com/organism/42.
 * This would show the element with the ID 42.
 *
 * @return array
 */
function organism_menu() {
	$items['organism'] = array(
			'title' => t('Classifiers'),
			'page callback' => 'organism_show_classifiers',
			'access arguments' => array(
					ORGANISMS_ACCESS
			),
			'description' => t('List of classifiers'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'organism.show.inc',
	);

	$items['organism/classification/%'] = array(
			'title' => t('Classification'),
			'page arguments' => array(
					2
			),
			'page callback' => 'organism_show_classification',
			'access arguments' => array(
					ORGANISMS_ACCESS
			),
			'description' => t('List of organisms classifications'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'organism.show.inc',
	);

	$items['organism/json'] = array(
			'title' => t('Species JSON'),
			'page callback' => 'organism_show_classifiers_json',
			'access arguments' => array(
					ORGANISMS_ACCESS
			),
			'description' => t('Json of classifiers'),
			'type' => MENU_CALLBACK,
			'file' => 'organism.json.inc',
	);

	$items['organism/classification/%/classificationjson'] = array(
			'title' => t('Classifications json'),
			'page arguments' => array(
					2
			),
			'page callback' => 'organism_show_classification_classificationjson',
			'access arguments' => array(
					ORGANISMS_ACCESS
			),
			'description' => t('List of subclassifications'),
			'type' => MENU_CALLBACK,
			'file' => 'organism.json.inc',
	);

	$items['organism/classification/%/organismjson'] = array(
			'title' => t('Species withing a classifications json'),
			'page arguments' => array(
					2
			),
			'page callback' => 'organism_show_classification_organismjson',
			'access arguments' => array(
					ORGANISMS_ACCESS
			),
			'description' => t('List of species with this classifications'),
			'type' => MENU_CALLBACK,
			'file' => 'organism.json.inc',
	);

	$items['organism/%organism'] = array(
			'title' => t('Basisinfo'),
			'page callback' => 'organism_show_organism',
			'page arguments' => array(
					1
			),
			'access arguments' => array(
					ORGANISMS_ACCESS
			),
			'description' => t('Specific organism'),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'organism.show.inc',
	);

	$items['organism/%organism/normal'] = array(
			'title' => 'Basisinfo',
			'description' => 'Show organism',
			'page callback' => 'organism_show',
			'page arguments' => array(
					1
			),
			'access arguments' => array(
					ORGANISMS_ACCESS
			),
			'type' => MENU_DEFAULT_LOCAL_TASK | MENU_NORMAL_ITEM,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
			'file' => 'organism.show.inc',
	);

	$items['organism/%organism/json'] = array(
			'title' => t('Species json'),
			'page arguments' => array(
					1
			),
			'page callback' => 'organism_show_organism_json',
			'access arguments' => array(
					ORGANISMS_ACCESS
			),
			'description' => t('Specific species json'),
			'type' => MENU_CALLBACK,
			'file' => 'organism.json.inc',
	);

	$items['organism/search/json'] = array(
			'title' => t('Species search json'),
			'page callback' => 'organism_search_organism_json',
			'access arguments' => array(
					ORGANISMS_ACCESS
			),
			'description' => t('Specific species json'),
			'type' => MENU_CALLBACK,
			'file' => 'organism.json.inc',
	);

	$items['organism/%/edit'] = array(
			'title' => t('File upload'),
			'description' => t('Delete or edit files'),
			'page callback' => 'drupal_get_form',
			'page arguments' => array(
					'organism_edit_files_form',
					1
			),
			'access arguments' => array(
					ORGANISMS_UPLOAD
			),
			'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
			'file' => 'organism.edit.inc',
			'weight' => 10,
	);

	$items['organism/%/delete_file/%'] = array(
			'title' => t('Delete file'),
			'description' => t('Delete an existing file'),
			'page callback' => 'drupal_get_form',
			'page arguments' => array(
					'organism_delete_file',
					1,
					3
			),
			'access arguments' => array(
					ORGANISMS_UPLOAD
			),
			'file' => 'organism.edit.inc',
			'weight' => 10,
	);

	// 	if (function_exists('gallery_list_renderer')) {
	// 		$items['organism/%organism/reference/gallery'] = array(
	// 				'title' => t('Gallery'),
	// 				'description' => t(
	// 					'View the organism as a gallery of organism pictures'),
	// 				'page callback' => 'organism_reference_gallery',
	// 				'page arguments' => array(
	// 						1
	// 				),
	// 				'access arguments' => array(
	// 						AREA_ACCESS
	// 				),
	// 				'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
	// 				'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
	// 				'file' => 'organism.inc',
	// 				'weight' => 6
	// 		);

	// 		$items['organism/%organism/reference/list'] = array(
	// 				'title' => t('List'),
	// 				'description' => t(
	// 					'View the organism as a list of organism pictures'),
	// 				'page callback' => 'organism_reference_list',
	// 				'page arguments' => array(
	// 						1
	// 				),
	// 				'access arguments' => array(
	// 						AREA_ACCESS
	// 				),
	// 				'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
	// 				'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
	// 				'file' => 'organism.inc',
	// 				'weight' => 7
	// 		);
	// 	}
	return $items;
}

/**
 * Define permissions which can be given to different roles.
 *
 * @note Those permissions are not related to the acl
 */
function organism_permission() {
	return array(
			ORGANISMS_UPLOAD => array(
					'title' => t('Upload files to species.'),
			),
			ORGANISMS_ACCESS => array(
					'title' => t('View species'),
			)
	);
}

/**
 * Create an organism object with all data about an organism.
 * @note Does not include the classification data.
 *
 * Example:
 * $organism = array(
 * 		'scientific_name' => 'Acantholycosa pedestris',
 * 		'synonyms' => array(
 * 				'Acantholycosa pedestris v2'
 * 		),
 * 		'id' => 123,
 * 		'classification_name_translations' => array(
 * 				'de' => array(
 * 						'Schattenkraut',
 * 				),
 * 				'en' => array(
 * 						'Shadowherb'
 * 				)
 * 		),
 * 		'attributes' => array(
 * 				'author' => array(
 * 						'valuetype' => 't',
 * 						'values' => array(
 * 								'Reto'
 * 						),
 * 				),
 * 				'NUESP' => array(
 * 						'valuetype' => 'n',
 * 						'values' => array(
 * 								1234
 * 						),
 * 				)
 * 		),
 * );
 * @param $organismId
 * 	String which should contain an integer and represents the Id of the requested organism.
 */
function organism_load($organismId) {
	$result = db_query(
		'SELECT
			osy.name AS synonym,
			o.id AS organism_id,
			o.scientific_name,
			CASE
				WHEN oa.valuetype = \'b\' THEN oav.boolean_value::text
				WHEN oa.valuetype = \'t\' THEN oav.text_value
				WHEN oa.valuetype = \'n\' THEN oav.number_value::text
			END AS attribute_value,
			oa.name AS attribute_name,
			oa.comment AS attribute_comment,
			oa.valuetype AS attribute_valuetype,
			oa.id AS attribute_id,
			ol.name AS localized_name,
			ol.languages_language AS language
		FROM (
			SELECT
				id, scientific_name
			FROM
				{organism}
			WHERE
				id = :organismId) AS o
		LEFT JOIN {organism_synonym} osy ON osy.organism_id=o.id
		LEFT JOIN {organism_attribute_value_subscription} oavs ON oavs.organism_id = o.id
		LEFT JOIN {organism_attribute_value} oav ON oav.id=oavs.organism_attribute_value_id
		LEFT JOIN {organism_attribute} oa ON oa.id = oav.organism_attribute_id
		LEFT JOIN {organism_lang} ol ON ol.organism_id = o.id;',
		array(':organismId' => $organismId),
		array('fetch' => PDO::FETCH_ASSOC));
	$rows = $result->fetchAll();
	$organism = array();
	if (isset($rows[0]['synonym'])) {
		$organism['synonyms'] = array();
	}

	foreach ($rows as $row) {
		if (isset($row['synonym']) && !in_array($row['synonym'], $organism['synonyms'])) {
			$organism['synonyms'][] = $row['synonym'];
		}
		$organism['id'] = $row['organism_id'];
		$organism['scientific_name'] = $row['scientific_name'];
		// fetch all translations
		if (isset($row['localized_name'])) {
			$organism['classification_name_translations'][$row['language']][$row['localized_name']] = $row['localized_name'];
		}
		if (isset($row['attribute_name'])) {
			$organism['attributes'][$row['attribute_name']]['values'][$row['attribute_value']] = $row['attribute_value'];
			$organism['attributes'][$row['attribute_name']]['valuetype'] = $row['attribute_valuetype'];
			$organism['attributes'][$row['attribute_name']]['comment'] = $row['attribute_comment'];
		}
	}
	return $organism;
}

/**
 * Return an array that contains a table which shows all documents for this organism.
 * 
 * @param int $organism_id The id of the desired organism
 * @param int $weight [optional] (default: 10)
 * @param boolean $collapsed [optional] (default: false)
 * @return Drupal render array
 */
function organism_files($organism_id, $weight = 10, $collapsed = false) {
	global $user;
	
	$result = db_query(
		'SELECT
  			fm.filename,
			fm.filemime,
			fm.timestamp,
			fm.fid,
			fm.filesize,
			ofm.description,
			ofm.author
		FROM
			{organism_file_managed} ofm,
			{file_managed} fm
		WHERE
			fm.fid = ofm.file_managed_fid
            AND ofm.organism_id = :id
  			AND fm.uid = :uid;',
		array(
			':id' => $organism_id,
			':uid' => $user->uid
		)
	);

	if (!empty($result)) {
		foreach ($result as $record) {
			$mimeIconMap = array(
				'path'  => drupal_get_path('module', 'commonstuff') . '/images/' . commonstuff_get_icon_map($record->filemime) . '.png',
				'alt'   => $record->filemime,
				'title' => $record->filemime,
			);
			$img_mime = theme('image', $mimeIconMap);

			$description = $record->description;
			$filename = l(
				$record->filename,
				'sites/default/files/naturvielfalt/organism/' . $organism_id . '/' . $record->filename
			);

			$img_delete = '<img'
				.' src="' . url(drupal_get_path('module', 'commonstuff') . '/images/can_delete.png') . '"'
				.' alt="' . t('Delete') . '"'
				.' />'
			;
			$filemime = $img_mime;
			$filesize = ($record->filesize / 1024) . " KB";
			$timestamp = date('d.m.Y', $record->timestamp);
			$author = isset($record->author) ? $record->author : '';
			
			$row = array();
			$row[] = $description;
			$row[] = $filename;
			$row[] = $filemime;
			$row[] = $filesize;
			$row[] = $timestamp;
			$row[] = $author;
			$row[] = $user->name;
			$row[] = l(
				$img_delete,
				'organism/' . $organism_id . '/delete_file/' . $record->fid,
				array('html' => true)
			);
			
			$rows[] = $row;
		}
	}
	
	$tableHeader[] = array(
				'name' => t('Description')
	);
	$tableHeader[] = array(
				'name' => t('Filename')
	);
	$tableHeader[] = array(
				'name' => t('Typ')
	);
	$tableHeader[] = array(
				'name' => t('Size')
	);
	$tableHeader[] = array(
				'name' => t('Date')
	);
	$tableHeader[] = array(
				'name' => t('Author')
	);
	$tableHeader[] = array(
				'name' => t('Owner')
	);
	$tableHeader[] = array(
				'name' => ''
	);

	$render_array = array(
			'#type' => 'fieldset',
			'#title' => t('Files'),
			'#weight' => $weight,
			'#collapsible' => true,
			'#collapsed' => $collapsed,
			'#attached' => array(
					'js' => array(
							'misc/form.js',
							'misc/collapse.js',
					),
			),
			'#attributes' => array(
					'class' => array(
							'collapsible'
					),
			),
	);
	
	$render_array['data'] = array(
		'#theme' => 'datatable',
		'#header' => $tableHeader,
		'#rows' => $rows,
		'#tableWidth' => 900,
		'#id_table' => 'files',
	);
		
	return $render_array;
}

/**
* Get count of all documents of an organism.
*
* @param int|array(int) $id
*   The ID (or an array of IDs) of the object.
* @return
*   Number of documents
*/
function organism_documents_count($id) {
	$select = db_select('organism_file_managed', 'ofm');
	$select->addExpression('COUNT(organism_id)', 'count');
	$conditions = db_and();
	if (is_array($id)) {
		$conditions->condition('ofm.organism_id', $id, "IN");
	} else {
		$conditions->condition('ofm.organism_id', $id);
	}
	$select->condition($conditions);
	$queryResult = $select->execute();
	$result = $queryResult->fetchField(0);
	return $result;
}

?>
