<?php
/**
 * @file area.module
 * @author Reto Schneider, 2012
 * @copyright 2012 Naturwerk, Brugg
 */

define('AREA_ACCESS', 'area access');
define('AREA_CREATE', 'area create');
define('AREA_MODERATE', 'area moderate');

/**********************************
 *  Hook implementations
 *********************************/

/**
 * Implements hook_menu()
 *
 * @return array
 */
function area_menu() {
	/* Create a new area */
	$items['area/new'] = array(
			'title' => t('Create new area'),
			'description' => t('Create a new area'),
			'page callback' => 'area_new_area',
			'access arguments' => array(
					AREA_CREATE
			),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'area.inc',
	);
	/* testing stuff */
	$items['area/naturwerkstatic'] = array(
			'title' => t('Static View'),
			'description' => t('Show Naturwerk in Brugg on a static map'),
			'page callback' => 'area_naturwerkstatic',
			'access arguments' => array(
					AREA_ACCESS
			),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'area.inc',
	);
	return $items;
}

/**
 * Implements hook_theme()
 *
 * @return an array with theme template information
 */
function area_theme() {
	return array(
			'area' => array(
					'template' => 'area',
					'variables' => array(
							// enable searchbox
							'search' => true,
							// include elements to edit existing areas
							'edit' => false,
							// include elements to create new areas
							'create' => false
					)
			)
	);
}

/**
 * Define permissions which can be given to different roles
 * @note Those permissions still have to obey to the acl permissions
 */
function area_permission() {
	return array(
			AREA_ACCESS => array(
					'title' => t('View area'),
			),
			AREA_CREATE => array(
					'title' => t('Create area'),
			),
			AREA_MODERATE => array(
					'title' => t('Moderate any area'),
			)
	);
}

/**
 * Generate an URL to a static google map image
 * @todo figure out, which coordination system is used
 * @todo Document how the json in $params['area-coords'] looks like
 * @todo This code has yet to be tested with areas
 * 
 * @param array $params Contains all optional parameters
 * fields:
 *  - $params['latitude']		Latitude of the center
 *  - $params['longitude']		Longitudeof the center
 *  - $params['area-coords']	Area coordinates as JSON
 *  - $params['fillcolor']		Color to draw an area or a line (hex/htmlcode)
 *  	Example for blue: 0x0000ff
 * @param integer $width of picture
 * @param integer $height of picture
 * @param integer $zoom zoomlevel -  1 to 18
 *
 * @return string URL to Google Maps static path
 */
function area_get_static_image_url($params, $width = 320, $height = 320,
		$zoom = false) {
	assert($width);
	assert($height);
	assert(isset($params['latitude']) || isset($params['area-coords']));
	assert(isset($params['longitude']) || isset($params['area-coords']));

	// make sure that either a point or an area gets submitted - not both
	assert(!(isset($params['latitude']) && isset($params['area-coords'])));
	assert(!(isset($params['longitude']) && isset($params['area-coords'])));

	/* Fill parameters with reasonable default values if none delivered */

	/* Coordinates are from userinput, not from a GPS reciever */
	$sensor = 'false';
	/* Color of the overlay (applies only if an area is given) */
	$fillcolor = isset($params['fillcolor']) ? $params['fillcolor'] : '0x0000ff';
	/* Defines the thickness of the outer line. 0 for areas, 2 if shape is a line (would not be visible otherwise) */
	$weight = 3;
	/* Stores how many points we have (1 => point, 2 => line, 3 or more => area) */
	$counter = 0;
	/* If a point is requested, this string will get filled with 'center=' and its condinates, separted by a comma */
	$center = '';
	/* A string with all the points, crafted to the needs of the google maps api
	 * Example for a triangle: 
	 * 		'|47.420596,8.238826|46.566354,7.063289|46.027422,8.87054'
	 **/
	$points = '';

	if (isset($params['latitude']) && isset($params['longitude'])) {
		$center = 'center=' . $params['latitude'] . ',' . $params['longitude'];
		$counter = 1;
	} else if (isset($params['area-coords'])) {
		$coordinates = json_decode($params['area-coords']);
		foreach ($coordinates as $coordinate) {
			$points .= '|' . $coordinate['0'] . ',' . $coordinate['1'];
			$counter++;
		}
	}

	// If we have just one point, set the zoomlevel to 18
	if ($counter <= 1 && !$zoom)
		$zoom = 18;
	$zoom = $zoom ? '&zoom=' . $zoom : '';

	// it could be a marker, a path or an area
	if ($counter == 1) {
		/* it's a point/marker */
		return 'http://maps.google.com/maps/api/staticmap?' . $center . $zoom
				. '&size=' . $width . 'x' . $height . '&sensor=' . $sensor
				. '&maptype=hybrid&markers=color:blue|' . $center . '&sensor='
				. $sensor;
	} else if ($counter >= 2) {
		/* it's a line or an area */
		return 'http://maps.google.com/maps/api/staticmap?' . $zoom . '&size='
				. $width . 'x' . $height . '&sensor=' . $sensor
				. '&maptype=hybrid&path=fillcolor:' . $fillcolor . '|weight:'
				. $weight . $points;
	}
}
?>
