<?php
/**
 * @file area.module
 * @author Reto Schneider, 2012
 * @copyright 2012 Naturwerk, Brugg
 */

define('AREA_ACCESS', 'area access');
define('AREA_CREATE', 'area create');

define("AREA_PATH_ZIP", "C:\\Program Files\\7-Zip\\");
define("AREA_PATH_OGR2OGR", "C:\\Program Files (x86)\\FWTools2.4.7\\bin\\");

$area_protocol = isset($_SERVER['HTTPS']) && !empty($_SERVER['HTTPS'])
		? 'https://' : 'http://';

/**********************************
 *  Hook implementations
 *********************************/

// needed for function area_get_full_dataset_of_specific_area
module_load_include('inc', 'area', 'area');

// load gallery integration
module_load_include('inc', 'area', 'area.gallery');

/**
 * Implements hook_menu()
 * @return array
 */
function area_menu() {
	$items = array();
		
	/* Show all available areas */
	$items['area'] = array(
			'title' => 'Areas',
			'description' => 'Show',
			'page callback' => 'drupal_goto',
			'page arguments' => array(
					'areas/show'
			),
			'type' => MENU_CALLBACK,
	);

	/* Show all available areas */
	$items['areas/show'] = array(
			'title' => 'Areas',
			'description' => 'Show',
			'page callback' => 'area_show_all_areas',
			'page arguments' => array(
					false
			),
			'access arguments' => array(
					AREA_ACCESS
			),
			'type' => MENU_NORMAL_ITEM,
			'expanded' => true,
			'file' => 'area.show.inc',
	);

	$items['area/%area/getchildren'] = array(
			'title' => 'Ajax call to receive all children ids',
			'page callback' => 'area_get_children',
			'page arguments' => array(
					1
			),
			'access arguments' => array(
					1,
					'ACL_READ'
			),
			'access callback' => 'area_check_access',
			'type' => MENU_CALLBACK,
			'file' => 'area.ajax.inc'		
	);
	
	/* Get all available areas as json*/
	$items['areas/json'] = array(
			'title' => 'All areas json',
			'description' => 'Get all areas as json',
			'page callback' => 'area_json',
			'page arguments' => array(
					false,
					'ACL_READ'
			),
			'access arguments' => array(
					AREA_ACCESS
			),
			'type' => MENU_CALLBACK,
			'file' => 'area.json.inc',
	);

	/* Get all available areas as json*/
	$items['area/%area/updategeometry/json'] = array(
			'title' => 'Update the geometry',
			'description' => 'Update the geometry of an area.',
			'page callback' => 'area_updategeometry_json',
			'page arguments' => array(
					1
			),
			'access arguments' => array(
					1,
					'ACL_WRITE'
			),
			'access callback' => 'area_check_access',
			'type' => MENU_CALLBACK,
			'file' => 'area.json.inc',
	);

	/* Get a single area as json */
	$items['area/%/json'] = array(
			'title' => 'An area json',
			'description' => 'Get a single area as json',
			'page callback' => 'area_json',
			'page arguments' => array(
					1
			),
			'access arguments' => array(
					AREA_ACCESS
			),
			'type' => MENU_CALLBACK,
			'file' => 'area.json.inc',
	);

	/* Get a all habitats within an area as datatable json */
	$items['area/%area/habitat/datatablejson'] = array(
			'title' => 'Habitats of area',
			'description' => 'Get all habitats of a an area.',
			'page callback' => 'area_habitat_within_area_datatable_json',
			'page arguments' => array(
					1
			),
			'access arguments' => array(
					AREA_ACCESS
			),
			'type' => MENU_CALLBACK,
			'file' => 'area.json.inc',
	);

	/* Get a all areas linked to a habitat as datatable json */
	$items['area/habitat/%/datatablejson'] = array(
			'title' => 'Habitats of area',
			'description' => 'Get all habitats of a an area.',
			'page callback' => 'area_linked_to_habitat_datatable_json',
			'page arguments' => array(
					2
			),
			'access arguments' => array(
					AREA_ACCESS
			),
			'type' => MENU_CALLBACK,
			'file' => 'area.json.inc',
	);

	/* Get all available areas as datatable json*/
	$items['areas/get/all'] = array(
			'title' => 'All areas datatable json',
			'description' => 'Get all areas as datatable json',
			'page callback' => 'area_datatable_json',
			'page arguments' => array(
					'ACL_READ'
			),
			'access arguments' => array(
					AREA_ACCESS
			),
			'type' => MENU_CALLBACK,
			'file' => 'area.json.inc',
	);

	/* Get own areas as datatable json*/
	$items['areas/get/own'] = array(
			'title' => 'Own areas datatable json',
			'description' => 'Get own areas as datatable json',
			'page callback' => 'area_datatable_json',
			'page arguments' => array(
					'own'
			),
			'access arguments' => array(
					AREA_ACCESS
			),
			'type' => MENU_CALLBACK,
			'file' => 'area.json.inc',
	);
	
	/* Get own areas as datatable json*/
	$items['areas/get/writeable'] = array(
			'title' => 'Own areas datatable json',
			'description' => 'Get own areas as datatable json',
			'page callback' => 'area_datatable_json',
			'page arguments' => array(
					'ACL_WRITE'
			),
			'access arguments' => array(
					AREA_ACCESS
			),
			'type' => MENU_CALLBACK,
			'file' => 'area.json.inc',
	);

	/* Create a new area */
	$items['area/new'] = array(
			'title' => 'Create',
			'description' => 'Create a new area',
			'page callback' => 'area_new_area',
			'access arguments' => array(
					AREA_CREATE
			),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'area.create.inc',
	);

	/* Show a specific area */
	$items['area/%area/show'] = array(
			'title' => 'Show',
			'description' => 'Show a specific area',
			'page arguments' => array(
					1
			),
			'page callback' => 'area_show_specific_area',
			'access arguments' => array(
					1,
					'ACL_READ'
			),
			'access callback' => 'area_check_access',
			'type' => MENU_LOCAL_TASK,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
			'file' => 'area.show.inc',
			'weight' => 1
	);

	/* Edit an area */
	$items['area/%area/edit'] = array(
			'title' => 'Edit',
			'description' => 'Edit details of an existing area.',
			'page callback' => 'area_edit',
			'page arguments' => array(
					1
			),
			'access arguments' => array(
					1,
					'ACL_WRITE'
			),
			'access callback' => 'area_check_access',
			'type' => MENU_LOCAL_TASK,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
			'file' => 'area.edit.inc',
			'weight' => 2
	);

	/* Delete an area */
	$items['area/%area/delete'] = array(
			'title' => 'Delete',
			'description' => 'Delete an existing area.',
			'page callback' => 'drupal_get_form',
			'page arguments' => array(
					'area_delete_form',
					1
			),
			'access arguments' => array(
					1,
					'ACL_ADMIN'
			),
			'access callback' => 'area_check_access',
			'type' => MENU_LOCAL_TASK,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
			'file' => 'area.delete.inc',
			'weight' => 99
	);
	
	// Delete many areas
	$items['area/delete'] = array(
			'title' => 'AreaJSON',
			'description' => 'Delete many areas',
			'access callback' => TRUE,
			'page callback' => 'area_delete',
			'file' => 'area.ajax.inc',
			'type' => MENU_CALLBACK,
	);
	
	// Export one or many areas
	$items['area/export'] = array(
			'title' => 'AreaJSON',
			'description' => 'Export one or many areas',
			'page callback' => 'area_export',
			'access callback' => TRUE,
			'file' => 'area.ajax.inc',
			'type' => MENU_CALLBACK
	);

	/* Show some important information about an area. For usage in a infoWindow, ajax. */
	$items['area/%area/areaoverview/ajaxform'] = array(
			'title' => 'Area overview form',
			'description' => t(
				'A form to show the most important facts about an area.'),
			'page callback' => 'area_overview_ajax_callback',
			'page arguments' => array(
					1
			),
			'access arguments' => array(
					1,
					'ACL_READ'
			),
			'access callback' => 'area_check_access',
			'type' => MENU_CALLBACK,
			'file' => 'area.ajax.inc',
	);

	/* Present a simple textfield to insert the area name. For usage in a infoWindow, ajax. */
	$items['area/getnewareanameajaxform'] = array(
			'title' => 'New areaname form',
			'description' => 'A form to submit a new areaname.',
			'page callback' => 'area_get_new_areaname_form_callback',
			'access arguments' => array(
					AREA_CREATE
			),
			'type' => MENU_CALLBACK,
			'file' => 'area.ajax.inc',
	);

	$items['area/addtoareadata'] = array(
			'title' => 'receive the possible areas to add a area to (becomes subarea)',
			'page callback' => 'area_add_to_area_data',
			'access callback' => TRUE,
			'type' => MENU_CALLBACK,
			'file' => 'area.ajax.inc'
	);
	
	$items['area/addtoarea/%area'] = array(
			'title' => 'add multiple areas to an area',
			'page callback' => 'area_add_to_area',
			'page arguments' => array(
					2
			),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK,
			'file' => 'area.ajax.inc'
	);

	return $items;
}

/**
 * Implements hook_theme()
 *
 * @return an array with theme template information
 */
function area_theme() {
	return array(
			'area' => array(
					'template' => 'area',
					'variables' => array(
							'mapid' => 'map',
							/**
							 * Requested functionality:
							 * 'create': create a new area
							 * 'edit': edit an existing area geometry ('area_geometry_id' has to be set)
							 * 'getcoordinate': get a position (set a marker and fill
							 *    its data into the hidden fields provided by area_address_hidden_form().
							 *    If 'coordinate_storage_id' is given, this field will be updated as well.
							 * @note Maybe this should be done with different themes. Have not done it
							 *    because I fear a lot of duplicated code duplication.
							 */
							'action' => false,
							// load geometries from this url
							'geometries_fetch_url' => '',
							// automatically load geometries
							'geometries_autoload' => true,
							// infoWindow content fetch url for areas. {ID} will be swaped with the actual id of the requested geometry.
							'infowindow_content_fetch_url_area' => '',
							// infoWindow content fetch url for observation. {ID} will be swaped with the actual id of the requested geometry.
							'infowindow_content_fetch_url_observation' => '',
							// url to get the content for the window when a new element gets created.
							'infowindow_createform_fetch_url' => '',
							// set to an integer if an area_geometry should be edited (note: action needs to be 'edit')
							// and geometry has to be loaded
							'geometry_edit_id' => false,
							// Where to post the updated geometry data
							// {ID} will be swaped with the actual id of the updated geometry.
							'geometry_update_url' => '',
							// element id for storage
							'coordinate_storage_id' => false,
							// the map height
							'height' => '400px',
							// the map min-height
							'min_height' => '200px',
							// the map width
							'width' => '100%',
							// enable searchbox
							'search' => false,
							// whether to show the scale or not
							'scalecontrol' => true,
							// include a field which shows/sets the CH1903 coordinates
							'ch1903' => false,
							// show a reticle on the map's center
							'reticle' => true,
							// enable streetview
							'streetview' => true,
							// enable mapcontrol
							'mapcontrol' => false,
							// enable scrollwheel
							'scrollwheel' => true,
							// automatically switch from satelit to hybrid view
							'mapswitch' => true,
							// switch from satelit to hybrid view at this level
							'mapswitchlevel' => 12,
							// default zoom level
							'defaultzoom' => 8,
							// load the last saved location (boundaries) when initializing the map
							'loadlastlocation' => true,
							// always save the currently viewed location (boundaries) when changing the map boundaries
							'savelastlocation' => true,
							// name of the javascript function to execute after the map has loaded the data
							'onDataLoadedHandler' => false
					)
			)
	);
}

/**
 * Define permissions which can be given to different roles.
 *
 * @note Those permissions still have to obey to the acl permissions
 */
function area_permission() {
	return array(
			AREA_ACCESS => array(
					'title' => t('View area'),
			),
			AREA_CREATE => array(
					'title' => t('Create area'),
			),
	);
}

/**
 * Generate an URL to a static google map image with one element (just ONE) highlighted.
 *
 * @todo Document how the json in $params['area-coords'] looks like
 *
 * @param $params
 * 	Array wich contains all optional parameters
 * 	fields:
 *  	- $params['type']			Type of specified geometry type  (POINT, LINESTRING or POLYGON)
 *  	- $params['coordinates']	Area coordinates as JSON (WGS84, lng/lat order)
 *  	- $params['color']			Color to draw an area or a line (hex/htmlcode, optional)
 *  		Example for blue: 0x0000ff
 * @param $width
 *  Width of picture in pixels, default is 320
 * @param $height
 * 	Height of picture in pixels, default is 320
 *
 * @return string URL to Google Maps static path
 */
function area_get_static_image_url($params, $width = 320, $height = 320,
		$zoom = false) {
	$area_protocol = isset($_SERVER['HTTPS']) && !empty($_SERVER['HTTPS'])
		? 'https://' : 'http://';
	if (false) {
		die("JSON: " . var_export($params, true));
	}
	assert(isset($params['coordinates']));
	assert(isset($params['type']));
	assert(
		$params['type'] == 'POINT' || $params['type'] == 'LINESTRING'
				|| $params['type'] == 'POLYGON');

	assert($width > 0);
	assert($height > 0);

	/* Fill parameters with reasonable default values if none delivered */
	/* Coordinates are from userinput, not from a GPS reciever */
	$sensor = 'false';
	/* Type of geometry: POINT, LINESTRING or POLYGON */
	$type = $params['type'];
	/* Color of the overlay */
	$color = isset($params['color']) ? $params['color'] : '0xff867c';

	$coordinates = json_decode($params['coordinates']);

	/* A string with all the points, crafted to the needs of the google maps api
	 * Example for a triangle:
	 * 		'|47.420596,8.238826|46.566354,7.063289|46.027422,8.87054'
	 **/
	if ($type == 'POINT') {
		$center = $coordinates[0][0] . ',' . $coordinates[0][1];
		return $area_protocol . 'maps.google.com/maps/api/staticmap?size='
				. $width . 'x' . $height . '&sensor=' . $sensor
				. '&maptype=hybrid&markers=color:' . $color . '|' . $center;
	} else if ($type == 'LINESTRING') {
		foreach ($coordinates as $coordinate) {
			$points[] = implode(',', $coordinate);
		}
		return $area_protocol . 'maps.google.com/maps/api/staticmap?' . $zoom
				. '&size=' . $width . 'x' . $height . '&sensor=' . $sensor
				. '&maptype=hybrid&path=color:' . $color . '|weight:4|'
				. implode('|', $points);
	} else if ($type == 'POLYGON') {
		foreach ($coordinates as $coordinate) {
			$points[] = implode(',', $coordinate);
		}
		return $area_protocol . 'maps.google.com/maps/api/staticmap?' . $zoom
				. '&size=' . $width . 'x' . $height . '&sensor=' . $sensor
				. '&maptype=hybrid&path=fillcolor:' . $color . '|color:'
				. $color . '|' . implode('|', $points);
	}
}

/**
 * Check if user has access to this area.
 *
 * @param $areadata
 * 	Array with all required area data
 * @param $acl_level
 * 	String with required ACL permission
 * @return
 * 	True if access granted, false if not
 * @note All this method needs of $areadata is acl_id - we probably could remove some code
 * when we make this access check more generic.
 */
function area_check_access($areadata = NULL, $acl_level = 'ACL_ADMIN') {
	if ($areadata == NULL) {
		return false;
	}

	$acl_number = variable_get($acl_level, -1);
	if (isset($areadata['acl_id']) && $acl_number != -1) {
		return check_permission($areadata['acl_id'], $acl_number);
	}
	return false;
}

/**
 * Check if user has write access to this observation
 *
 * @param int $area_id
 * @return boolean true if access ok, false if not
 */
function area_write_access_by_id($area_id = NULL) {
	if (isset($area_id)) {
		$areadata = area_get_full_dataset_of_specific_area($area_id);
		return area_check_access($areadata, 'ACL_WRITE');
	}
	return false;
}

/**
 * Return an array with all required information about an area.
 * This will be called for menuitems like this: 'area/%area/editgeometry'
 * @param $arg
 *	This string *should* actually be an integer
 * @return
 * 	Array with all area data
 */
function area_load($arg) {
	$areadata = array();
	if ($arg != NULL && ((int) $arg) > 0) {
		$areadata = area_get_full_dataset_of_specific_area($arg);
	}
	return $areadata;
}
?>
