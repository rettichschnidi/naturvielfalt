<?php
/**
 * @file area.module
 * @author Reto Schneider, 2012
 * @copyright 2012 Naturwerk, Brugg
 */

define('AREA_ACCESS', 'area access');
define('AREA_CREATE', 'area create');
define('AREA_MODERATE', 'area moderate');

/**********************************
 *  Hook implementations
 *********************************/

/**
 * Implements hook_menu()
 * @return array
 */
function area_menu() {
	/* Show all available areas */
	$items['area'] = array(
			'title' => t('All areas'),
			'description' => t('Show all areas'),
			'page callback' => 'drupal_goto',
			'page arguments' => array(
					'areas/show'
			),
			'access arguments' => array(
					AREA_ACCESS
			),
			'type' => MENU_CALLBACK,
	);
	
	/* Show all available areas */
	$items['areas/show'] = array(
			'title' => t('All areas'),
			'description' => t('Show all areas'),
			'page callback' => 'area_show_all_areas',
			'page arguments' => array(
					false
			),
			'access arguments' => array(
					AREA_ACCESS
			),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'area.show.inc',
	);
	
	/* Show all available areas */
	$items['areas/show/all'] = array(
			'title' => t('All areas'),
			'type' => MENU_DEFAULT_LOCAL_TASK,
	);

	/* Show all available areas */
	$items['areas/show/my'] = array(
			'title' => t('My areas'),
			'description' => t('Show all my own areas.'),
			'page callback' => 'area_show_all_areas',
			'page arguments' => array(
					true
			),
			'access arguments' => array(
					AREA_ACCESS
			),
			'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
			'file' => 'area.show.inc',
	);

	/* Get all available areas as json*/
	$items['areas/json'] = array(
			'title' => t('All areas json'),
			'description' => t('Get all areas as json'),
			'page callback' => 'area_json',
			'page arguments' => array(
					false,
					'ACL_READ'
			),
			'access arguments' => array(
					AREA_ACCESS
			),
			'type' => MENU_CALLBACK,
			'file' => 'area.json.inc',
	);

	/* Get all available areas as json*/
	$items['areas/own/json'] = array(
			'title' => t('All areas json'),
			'description' => t('Get all areas as json'),
			'page callback' => 'area_json',
			'page arguments' => array(
					false,
					'ACL_ADMIN'
			),
			'access arguments' => array(
					AREA_ACCESS
			),
			'type' => MENU_CALLBACK,
			'file' => 'area.json.inc',
	);

	/* Get all available areas as json*/
	$items['area/%area/updategeometry/json'] = array(
			'title' => t('Update the geometry'),
			'description' => t('Update the geometry of an area.'),
			'page callback' => 'area_updategeometry_json',
			'page arguments' => array(
					1
			),
			'access arguments' => array(
					1
			),
			'access callback' => 'area_write_access',
			'type' => MENU_CALLBACK,
			'file' => 'area.json.inc',
	);

	/* Get all available areas as json*/
	$items['area/%/json'] = array(
			'title' => t('An area json'),
			'description' => t('Get a single area as json'),
			'page callback' => 'area_json',
			'page arguments' => array(
					1
			),
			'access arguments' => array(
					AREA_ACCESS
			),
			'type' => MENU_CALLBACK,
			'file' => 'area.json.inc',
	);

	/* Get all available areas as datatable json*/
	$items['areas/all/datatablejson'] = array(
			'title' => t('All areas datatable json'),
			'description' => t('Get all areas as datatable json'),
			'page callback' => 'area_all_areas_datatable_json',
			'page arguments' => array(
					'ACL_READ'
			),
			'access arguments' => array(
					AREA_ACCESS
			),
			'type' => MENU_CALLBACK,
			'file' => 'area.json.inc',
	);

	/* Get own areas as datatable json*/
	$items['areas/own/datatablejson'] = array(
			'title' => t('Own areas datatable json'),
			'description' => t('Get own areas as datatable json'),
			'page callback' => 'area_all_areas_datatable_json',
			'page arguments' => array(
					'ACL_ADMIN'
			),
			'access arguments' => array(
					AREA_ACCESS
			),
			'type' => MENU_CALLBACK,
			'file' => 'area.json.inc',
	);

	/* Create a new area */
	$items['area/new'] = array(
			'title' => t('Create new area'),
			'description' => t('Create a new area'),
			'page callback' => 'area_new_area',
			'access arguments' => array(
					AREA_CREATE
			),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'area.create.inc',
	);

	/* Show a specific area */
	$items['area/%area/show'] = array(
			'title' => t('Show area'),
			'description' => t('Show a specific area'),
			'page arguments' => array(
					1
			),
			'page callback' => 'area_show_specific_area',
			'access arguments' => array(
					1
			),
			'access callback' => 'area_read_access',
			'type' => MENU_LOCAL_TASK,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
			'file' => 'area.show.inc',
			'weight' => 1
	);
	
	/* Edit an area */
	$items['area/%area/edit'] = array(
			'title' => t('Edit area details'),
			'description' => t('Edit details of an existing area.'),
			'page callback' => 'area_edit',
			'page arguments' => array(
					1
			),
			'access arguments' => array(
					1
			),
			'access callback' => 'area_write_access',
			'type' => MENU_LOCAL_TASK,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
			'file' => 'area.edit.inc',
			'weight' => 2
	);

	/* Edit an area */
	$items['area/%area/editgeometry'] = array(
			'title' => t('Edit geometry'),
			'description' => t('Edit the geometry of an existing geometry.'),
			'page callback' => 'area_edit_geometry',
			'page arguments' => array(
					1
			),
			'access arguments' => array(
					1
			),
			'access callback' => 'area_write_access',
			'type' => MENU_LOCAL_TASK,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
			'file' => 'area.edit.inc',
			'weight' => 3
	);

	/* Edit an area */
	$items['area/%area/delete'] = array(
			'title' => t('Delete area'),
			'description' => t('Delete an existing area.'),
			'page callback' => 'drupal_get_form',
			'page arguments' => array(
					'area_delete_form',
					1
			),
			'access arguments' => array(
					1
			),
			'access callback' => 'area_admin_access',
			'type' => MENU_LOCAL_TASK,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
			'file' => 'area.delete.inc',
			'weight' => 99
	);

	/* Edit an area */
	$items['area/%area/permissions'] = array(
			'title' => t('Edit permission'),
			'description' => t('Edit the permission of this area.'),
			'page callback' => 'area_edit_permission',
			'page arguments' => array(
					1
			),
			'access arguments' => array(
					1
			),
			'access callback' => 'area_admin_access',
			'type' => MENU_LOCAL_TASK,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
			'file' => 'area.admin.inc',
			'weight' => 4
	);

	/* Show some important information about an area. For usage in a infoWindow, ajax. */
	$items['area/%area/areaoverview/ajaxform'] = array(
			'title' => t('Area overview form'),
			'description' => t(
				'A form to show the most important facts about an area.'),
			'page callback' => 'area_overview_ajax_callback',
			'page arguments' => array(
					1
			),
			'access arguments' => array(
					1
			),
			'access callback' => 'area_read_access',
			'type' => MENU_CALLBACK,
			'file' => 'area.ajax.inc',
	);

	/* Present a simple textfield to insert the area name. For usage in a infoWindow, ajax. */
	$items['area/getnewareanameajaxform'] = array(
			'title' => t('New areaname form'),
			'description' => t('A form to submit a new areaname.'),
			'page callback' => 'area_get_new_areaname_form_callback',
			'access arguments' => array(
					AREA_CREATE
			),
			'type' => MENU_CALLBACK,
			'file' => 'area.ajax.inc',
	);

	/**
	 * Example usage of theme area with action 'getcoordinate'
	 * @todo Delete when module singleobservation finished
	 */ 
	$items['area/testing'] = array(
			'title' => t('Example for Ramon'),
			'description' => t(
				'Example for Ramon about how to use my wonderful area module.'),
			'page callback' => 'drupal_get_form',
			'page arguments' => array(
					'area_testing_form'
			),
			'access arguments' => array(
					AREA_ACCESS
			),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'area.module',
	);

	return $items;
}

/**
 * Example usage of theme area with action 'getcoordinate'
 * @todo Delete when module singleobservation finished
 */
function area_testing_form($form, &$form_state) {
	$form['test'] = array(
			'#type' => 'textfield',
			'#title' => 'Coordinates as JSON',
			'#attributes' => array(
					'id' => 'meineid'
			),
	);

	$form['div'] = array(
			'#type' => 'fieldset',
			'#title' => "Google Map",
			'#attributes' => array(
					'style' => 'width: 95%;'
			)
	);

	$form['div']['hiddenfields'] = area_address_hidden_form();

	$form['div']['map'] = array(
			'#theme' => 'area',
			'#action' => 'getcoordinate',
			'#coordinate_storage_id' => 'meineid',
			'#search' => true,
			'#ch1903' => true
	);
	return $form;
}

/**
 * Implements hook_theme()
 *
 * @return an array with theme template information
 */
function area_theme() {
	return array(
			'area' => array(
					'template' => 'area',
					'variables' => array(
							// Requested functionality:
							//  'create': create a new area
							//  'edit': edit an existing area ('area_id' has to be set)
							//  'getcoordinate': get a coordinate (set a marker and fill
							//		its position into a hidden field , 'coordinate_storage_id'
							//		needs to be set)
							'action' => NULL,
							// enable searchbox
							'search' => false,
							// show all areas of ... either 'myareas' or 'allareas'
							'show' => false,
							// set to an integer if an (existing) area should be highlighted
							'area_id' => false,
							// wether to show the scale or not
							'scalecontrol' => true,
							// include a filed which shows/sets the CH1903 coordinates
							'ch1903' => false,
							// element id for storage
							'coordinate_storage_id' => false
					)
			)
	);
}

/**
 * Define permissions which can be given to different roles
 * @note Those permissions still have to obey to the acl permissions
 */
function area_permission() {
	return array(
			AREA_ACCESS => array(
					'title' => t('View area'),
			),
			AREA_CREATE => array(
					'title' => t('Create area'),
			),
			AREA_MODERATE => array(
					'title' => t('Moderate any area'),
			)
	);
}

/**
 * Generate an URL to a static google map image with one element (just ONE) highlighted
 * @todo Document how the json in $params['area-coords'] looks like
 * 
 * @param array $params Contains all optional parameters
 * fields:
 *  - $params['type']			Type of specified geometry type  (POINT, LINESTRING or POLYGON)
 *  - $params['coordinates']	Area coordinates as JSON (WGS84, lng/lat order)
 *  - $params['color']			Color to draw an area or a line (hex/htmlcode, optional)
 *  	Example for blue: 0x0000ff
 * @param integer $width of picture in pixels, default is 320
 * @param integer $height of picture in pixels, default is 320
 *
 * @return string URL to Google Maps static path
 */
function area_get_static_image_url($params, $width = 320, $height = 320,
		$zoom = false) {
	if (false)
		die("JSON: " . var_export($params, true));
	assert(isset($params['coordinates']));
	assert(isset($params['type']));
	assert(
		$params['type'] == 'POINT' || $params['type'] == 'LINESTRING'
				|| $params['type'] == 'POLYGON');

	assert($width);
	assert($height);

	/* Fill parameters with reasonable default values if none delivered */
	/* Coordinates are from userinput, not from a GPS reciever */
	$sensor = 'false';
	/* Type of geometry: POINT, LINESTRING or POLYGON */
	$type = $params['type'];
	/* Color of the overlay */
	$color = isset($params['color']) ? $params['color'] : '0xff0000';

	$coordinates = json_decode($params['coordinates']);

	if ($type == 'POINT') {
		$center = $coordinates[0][0] . ',' . $coordinates[0][1];
		return 'http://maps.google.com/maps/api/staticmap?size=' . $width . 'x'
				. $height . '&sensor=' . $sensor
				. '&maptype=hybrid&markers=color:' . $color . '|' . $center;
	} else if ($type == 'LINESTRING') {
		foreach ($coordinates as $coordinate) {
			$points[] = implode(',', $coordinate);
		}
		return 'http://maps.google.com/maps/api/staticmap?' . $zoom . '&size='
				. $width . 'x' . $height . '&sensor=' . $sensor
				. '&maptype=hybrid&path=color:' . $color . '|weight:4|'
				. implode('|', $points);
	} else if ($type == 'POLYGON') {
		/* A string with all the points, crafted to the needs of the google maps api
		 * Example for a triangle:
		 * 		'|47.420596,8.238826|46.566354,7.063289|46.027422,8.87054'
		 **/
		foreach ($coordinates as $coordinate) {
			$points[] = implode(',', $coordinate);
		}
		return 'http://maps.google.com/maps/api/staticmap?' . $zoom . '&size='
				. $width . 'x' . $height . '&sensor=' . $sensor
				. '&maptype=hybrid&path=fillcolor:' . $color . '|color:'
				. $color . '|' . implode('|', $points);
	}
}

/**
 * Check if user has admin access to this area
 *
 * @param array $areadata
 * @return boolean true if access ok, false if not
 * @todo Implementation
 */
function area_admin_access($areadata = NULL) {
	if ($areadata == NULL) {
		return false;
	}

	if (isset($areadata['acl_id'])) {
		return check_permission($areadata['acl_id'], variable_get('ACL_ADMIN'));
	}
	return false;
}

/**
 * Check if user has write access to this area
 *
 * @param array $areadata
 * @return boolean true if access ok, false if not
 * @todo Implementation
 */
function area_write_access($areadata = NULL) {
	if ($areadata == NULL || empty($areadata)) {
		return false;
	}

	if (isset($areadata['acl_id'])) {
		return check_permission($areadata['acl_id'], variable_get('ACL_WRITE'));
	}
	return false;
}

/**
 * Check if user has read access to this area
 *
 * @param array $areadata
 * @return boolean true if access ok, false if not
 * @todo Implementation
 */
function area_read_access($areadata = NULL) {
	if ($areadata == NULL || empty($areadata)) {
		return false;
	}

	if (isset($areadata['acl_id'])) {
		return check_permission($areadata['acl_id'], variable_get('ACL_READ'));
	}
	return false;
}

// needed for function area_get_full_dataset_of_specific_area
module_load_include('inc', 'area', 'area');

/**
 * Return an array with all required information about an area.
 * This will be called for menuitems like this: 'area/%area/editgeometry'
 * @param string $arg
 * 		This string *should* acutally be an integer
 * @return array $areadata
 */
function area_load($arg) {
	$areadata = array();
	if ($arg != NULL && ((int)$arg) > 0) {
		$areadata = area_get_full_dataset_of_specific_area($arg);
	}
	return $areadata;
}
?>
