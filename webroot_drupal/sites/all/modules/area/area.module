<?php
/**
 * @file area.module
 * @author Reto Schneider, 2012
 * @copyright 2012 Naturwerk, Brugg
 */

define('AREA_ACCESS', 'area access');
define('AREA_CREATE', 'area create');
define('AREA_EDIT', 'area edit');
define('AREA_MODERATE', 'area moderate');

/**********************************
 *  Hook implementations
 *********************************/

/**
 * Implements hook_menu()
 * @return array
 */
function area_menu() {

	/* Show all available areas */
	$items['area'] = array(
			'title' => t('Show all areas'),
			'description' => t('Show all areas'),
			'page callback' => 'area_show_all_areas',
			'access arguments' => array(
					AREA_ACCESS
			),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'area.show.inc',
	);

	/* Show a specific area */
	$items['area/%'] = array(
			'title' => t('Show all areas'),
			'description' => t('Show all areas'),
			'page callback' => 'area_show_specific_area',
			'access arguments' => array(
					AREA_ACCESS
			),
			'page arguments' => array(
					1
			),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'area.show.inc',
	);

	/* Get all available areas as json*/
	$items['area/json'] = array(
			'title' => t('All areas json'),
			'description' => t('Get all areas as json'),
			'page callback' => 'area_all_areas_json',
			'access arguments' => array(
					AREA_ACCESS
			),
			'type' => MENU_CALLBACK,
			'file' => 'area.json.inc',
	);

	/* Get all available areas as datatable json*/
	$items['area/datatablejson'] = array(
			'title' => t('All areas datatable json'),
			'description' => t('Get all areas as datatable json'),
			'page callback' => 'area_all_areas_datatablejson_json',
			'access arguments' => array(
					AREA_ACCESS
			),
			'type' => MENU_CALLBACK,
			'file' => 'area.json.inc',
	);

	/* Create a new area */
	$items['area/new'] = array(
			'title' => t('Create new area'),
			'description' => t('Create a new area'),
			'page callback' => 'area_new_area',
			'access arguments' => array(
					AREA_CREATE
			),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'area.create.inc',
	);

	/* Edit an area */
	$items['area/%/edit'] = array(
			'title' => t('Edit area'),
			'description' => t('Edit an existing area .'),
			'page callback' => 'area_edit',
			'access arguments' => array(
					AREA_EDIT
			),
			'page arguments' => array(
					1
			),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'area.edit.inc',
	);

	/* Show some important information about an area. For usage in a infoWindow, ajax. */
	$items['area/getareaoverviewajaxform'] = array(
			'title' => t('New areaname.'),
			'description' => t('Please submit a new areaname.'),
			'page callback' => 'area_overview_ajax_callback',
			'access arguments' => array(
					AREA_CREATE
			),
			'type' => MENU_CALLBACK,
			'file' => 'area.ajax.inc',
	);

	/* Present a simple textfield to insert the area name. For usage in a infoWindow, ajax. */
	$items['area/getnewareanameajaxform'] = array(
			'title' => t('New areaname.'),
			'description' => t('Please submit a new areaname.'),
			'page callback' => 'area_get_new_areaname_form_callback',
			'access arguments' => array(
					AREA_CREATE
			),
			'type' => MENU_NORMAL_ITEM,
			'file' => 'area.ajax.inc',
	);
	return $items;
}

/**
 * Implements hook_theme()
 *
 * @return an array with theme template information
 */
function area_theme() {
	return array(
			'area' => array(
					'template' => 'area',
					'variables' => array(
							// enable searchbox
							'search' => true,
							// include elements to edit existing areas
							'edit' => false,
							// include elements to create new areas
							'create' => false,
							// show all existing areas
							'showall' => false
					)
			)
	);
}

/**
 * Define permissions which can be given to different roles
 * @note Those permissions still have to obey to the acl permissions
 */
function area_permission() {
	return array(
			AREA_ACCESS => array(
					'title' => t('View area'),
			),
			AREA_CREATE => array(
					'title' => t('Create area'),
			),
			AREA_MODERATE => array(
					'title' => t('Moderate any area'),
			)
	);
}

/**
 * Generate an URL to a static google map image with one element (just ONE) highlighted
 * @todo Document how the json in $params['area-coords'] looks like
 * 
 * @param array $params Contains all optional parameters
 * fields:
 *  - $params['type']			Type of specified geometry type  (POINT, LINESTRING or POLYGON)
 *  - $params['coordinates']	Area coordinates as JSON (WGS84, lng/lat order)
 *  - $params['color']			Color to draw an area or a line (hex/htmlcode, optional)
 *  	Example for blue: 0x0000ff
 * @param integer $width of picture in pixels, default is 320
 * @param integer $height of picture in pixels, default is 320
 *
 * @return string URL to Google Maps static path
 */
function area_get_static_image_url($params, $width = 320, $height = 320,
		$zoom = false) {
	if (false)
		die("JSON: " . var_export($params, true));
	assert(isset($params['coordinates']));
	assert(isset($params['type']));
	assert(
		$params['type'] == 'POINT' || $params['type'] == 'LINESTRING'
				|| $params['type'] == 'POLYGON');

	assert($width);
	assert($height);

	/* Fill parameters with reasonable default values if none delivered */
	/* Coordinates are from userinput, not from a GPS reciever */
	$sensor = 'false';
	/* Type of geometry: POINT, LINESTRING or POLYGON */
	$type = $params['type'];
	/* Color of the overlay */
	$color = isset($params['color']) ? $params['color'] : '0xff0000';

	$coordinates = json_decode($params['coordinates']);

	if ($type == 'POINT') {
		$center = $coordinates[0][0] . ',' . $coordinates[0][1];
		return 'http://maps.google.com/maps/api/staticmap?size=' . $width . 'x'
				. $height . '&sensor=' . $sensor
				. '&maptype=hybrid&markers=color:' . $color . '|' . $center;
	} else if ($type == 'LINESTRING') {
		foreach ($coordinates as $coordinate) {
			$points[] = implode(',', $coordinate);
		}
		return 'http://maps.google.com/maps/api/staticmap?' . $zoom . '&size='
				. $width . 'x' . $height . '&sensor=' . $sensor
				. '&maptype=hybrid&path=color:' . $color . '|weight:4|'
				. implode('|', $points);
	} else if ($type == 'POLYGON') {
		/* A string with all the points, crafted to the needs of the google maps api
		 * Example for a triangle:
		* 		'|47.420596,8.238826|46.566354,7.063289|46.027422,8.87054'
		**/
		foreach ($coordinates as $coordinate) {
			$points[] = implode(',', $coordinate);
		}
		return 'http://maps.google.com/maps/api/staticmap?' . $zoom . '&size='
				. $width . 'x' . $height . '&sensor=' . $sensor
				. '&maptype=hybrid&path=fillcolor:' . $color . '|color:'
				. $color . '|' . implode('|', $points);
	}
}
?>
