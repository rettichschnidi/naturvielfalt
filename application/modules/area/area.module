<?php

define('AREA_ACCESS', 'area access');
define('AREA_CREATE', 'area create');

/**********************************
 *  Hook implementations
 *********************************/

/**
 * Implements hook_help()
 *
 * @param $path
 * @param $arg
 * @return string
 */
function area_help($path, $arg) {
  switch ($path) {
    case "admin/help#area":
      return '<p>'.  t("Area module") .'</p>';
      break;
  }
}

/**
 * Implements hook_menu()
 *
 * @return array
 */
function area_menu() {
  $items['area'] = array(
    'title' => t('Areas'),
    'description' => t('List of areas'),
    'page callback' => 'show_area_search',
    'access arguments' => array(AREA_ACCESS),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'area.search.inc',
  );
  $items['area/%'] = array(
    'title' => t('Area'),
    'description' => t('View an area'),
    'page callback' => 'show_area',
    'page arguments' => array(1),
    'access arguments' => array(AREA_ACCESS),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'area.inc',
  );
  $items['area/%/normal'] = array(
    'title' => t('View'),
    'description' => t('View of an area'),
    'page callback' => 'show_area',
    'page arguments' => array(1),
    'access arguments' => array(AREA_ACCESS),
    'type' => MENU_DEFAULT_LOCAL_TASK | MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'area.inc',
    'weight' => 1
  );
  $items['area/%/gallery'] = array(
    'title' => t('Gallery'),
    'description' => t('View the area as a gallery of organisms'),
    'page callback' => 'area_gallery',
    'page arguments' => array(1),
    'access arguments' => array(AREA_ACCESS),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'area.inc',
    'weight' => 2
  );
  $items['area/%/list'] = array(
    'title' => t('List'),
    'description' => t('View the area as a list of organisms'),
    'page callback' => 'area_list',
    'page arguments' => array(1),
    'access arguments' => array(AREA_ACCESS),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'area.inc',
    'weight' => 3
  );
   $items['area/%/edit'] = array(
    'title' => t('Edit'),
    'description' => t('Edit area properties'),
    'page callback' => 'area_edit',
    'page arguments' => array(1),
    'access arguments' => array(1),
    'access callback' => 'area_edit_access',
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'area.edit.inc',
    'weight' => 6
  );
     $items['area/%/delete'] = array(
    'title' => t('Delete'),
    'description' => t('Delete area'),
    'page callback' => 'area_delete',
    'page arguments' => array(1),
    'access arguments' => array(1),
    'access callback' => 'area_edit_access',
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'area.delete.inc',
    'weight' => 7
  );
  $items['area/new'] = array(
    'title' => 'Create new area',
    'description' => 'Create an area',
    'page callback' => 'area_new',
    'access arguments' => array(AREA_CREATE),
    'type' => MENU_CALLBACK,
    'file' => 'area.new.inc',
  );
  $items['area/gmap_image_redirect/%'] = array(
    'title' => 'Redirect to Google Maps static image URL',
    'description' => 'Google Maps static image redirect',
    'page callback' => 'googlemaps_static_redirect',
    'page arguments' => array(2),
    'access arguments' => array(AREA_ACCESS),
    'type' => MENU_CALLBACK,
    'file' => 'area.search.inc',
  );
  $items['area/habitat_autocomplete'] = array(
    'title' => 'Habitat autocomplete',
    'page callback' => 'area_habitat_autocomplete',
    'access arguments' => array(AREA_CREATE),
    'type' => MENU_CALLBACK,
    'file' => 'area.ajax.inc',
  );
  $items['area/area_saved_autocomplete'] = array(
    'title' => 'Area autocomplete',
    'page callback' => 'area_saved_autocomplete',
    'access arguments' => array(AREA_CREATE),
    'type' => MENU_CALLBACK,
    'file' => 'area.ajax.inc',
  );
  $items['area/json'] = array(
    'title' => 'area information in json format',
    'page callback' => 'area_json',
    'access arguments' => array(AREA_ACCESS),
    'type' => MENU_CALLBACK,
    'file' => 'area.ajax.inc',
  );
  $items['area/getareas'] = array(
    'title' => 'area information in json format',
    'page callback' => 'get_areas',
    'access arguments' => array(AREA_ACCESS),
    'type' => MENU_CALLBACK,
    'file' => 'area.ajax.inc',
  );
  $items['area/datatable'] = array(
    'title' => 'area information in json format for datatable',
    'page callback' => 'area_datatable',
    'access arguments' => array(AREA_ACCESS),
    'type' => MENU_CALLBACK,
    'file' => 'area.ajax.inc',
  );

  return $items;
}

/**
 * Implements hook_theme()
 *
 * @return an array with theme template information
 */
function area_theme() {
  return array(
    'area.new' => array(
      'template' => 'area.new',
      'variables' => array()
    ),
    'area.search' => array(
      'template' => 'area.search',
      'variables' => array()
    ),
    'area.search.byMaps' => array(
      'template' => 'area.search.byMaps',
      'variables' => array()
    ),
    'area.search.byMaps.show' => array(
      'template' => 'area.search.byMaps.show',
      'variables' => array()
    ),
  );
}

function area_permission() {
  return array(
    AREA_ACCESS =>  array(
      'title' => t('can view areas'),
    ),
    AREA_CREATE =>  array(
      'title' => t('can create areas'),
    ),
  );
}

/**
 * Implements hook of gallery module to activate the gallery
 * functionality for area
 * 
 * @return array
 */
function area_gallery_types() {
  return array(
    'area' => array(
      'image_caption' => 'area_gallery_image_caption',
      'manage_title' => 'area_gallery_manage_title',
      'manage_description' => 'area_gallery_manage_description'
    ),
    'area_habitat' => array(
      'image_caption' => 'area_habitat_gallery_image_caption',
      'manage_title' => 'area_habitat_gallery_manage_title',
      'manage_description' => 'area_habitat_gallery_manage_description',
      'crosslinked' => false
    )
  );
}

/**
 * Helper function referenced in area_gallery_types to define the caption
 * for images added to areas
 * 
 * @param $id
 * @return string
 */
function area_gallery_image_caption($id) {
  return l(area_gallery_caption($id), 'area/'.$id, array('html' => true));
}

/**
 * Helper function referenced in area_gallery_types to define the title of 
 * the manage images page for areas
 * 
 * @param string $id
 *   The id of object
 * @return string
 */
function area_gallery_manage_title($id) {
  return t('Images of the area !title', array('!title' => '<em>'.area_gallery_caption($id).'</em>'));
}

/**
 * Helper function creating a generic caption for an area
 * 
 * @param string $id
 *   The id of object
 * @return string
 */
function area_gallery_caption($id) {
  $result = db_select('area', 'a')
    ->condition('id', $id)
    ->fields('a')
    ->execute()
    ->fetch();
  return $result->field_name.' <small>'.$result->locality.' '.$result->canton.', '.$result->country.'</small>';
}

/**
 * Helper function referenced in area_gallery_types to define the description of 
 * the manage images page for areas
 * 
 * @param string $id
 *   The id of object
 * @return string
 */
function area_gallery_manage_description($id) {
  return t('Add and edit generic images of this area.');
}

/**
 * Helper function referenced in area_gallery_types to define the caption
 * for images added to area habitats
 * 
 * @param $id
 * @return string
 */
function area_habitat_gallery_image_caption($id) {
  $result = db_select('area_habitat', 'ah')
    ->condition('id', $id)
    ->fields('ah')
    ->execute()
    ->fetch();
  return habitat_gallery_image_caption($result->habitat_id);
}

/**
 * Helper function referenced in area_gallery_types to define the title of 
 * the manage images page for area habitats
 * 
 * @param string $id
 *   The id of object
 * @return string
 */
function area_habitat_gallery_manage_title($id) {
  $result = db_select('area_habitat', 'ah')
    ->condition('id', $id)
    ->fields('ah')
    ->execute()
    ->fetch();
  return t('Images of the habitat !title<br>taken in the area !context', array(
    '!title' => '<em>'.habitat_gallery_caption($result->habitat_id).'</em>',
    '!context' => '<em>'.area_gallery_caption($result->area_id).'</em>'
  ));
}

/**
 * Helper function referenced in area_gallery_types to define the description of 
 * the manage images page for area habitats
 * 
 * @param string $id
 *   The id of object
 * @return string
 */
function area_habitat_gallery_manage_description($id) {
  return t('Add and edit images of the specified habitat located in the mentioned area.');
}

/**
 * Implements hook of gallery module to define the conversion of a area habitat
 * to the related habitat
 * 
 * @return array
 */
function area_gallery_type_conversions() {
  return array(
    array(
      array(
        'source' => 'area_habitat',
        'source_key' => 'habitat_id',
        'target' => 'habitat',
        'target_key' => 'id',
      )
    ),
    array(
      array(
        'source' => 'habitat',
        'source_key' => 'id',
        'target' => 'area_habitat',
        'target_key' => 'habitat_id',
      )
    )
  );
}

/**
 * Implements hook of gallery module to define the different category
 * conditions available for area types
 * 
 * @return array
 */
function area_gallery_category_conditions() {
  return array(
    'area' => array(
      'name' => t('Areas'),
      'type' => 'area'
    ),
  );
}

function area_get_icon_map($filemime) {

  switch ($filemime) {
    // Word document types.
    case 'application/msword':
    case 'application/vnd.ms-word.document.macroEnabled.12':
    case 'application/vnd.oasis.opendocument.text':
    case 'application/vnd.oasis.opendocument.text-template':
    case 'application/vnd.oasis.opendocument.text-master':
    case 'application/vnd.oasis.opendocument.text-web':
    case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
    case 'application/vnd.stardivision.writer':
    case 'application/vnd.sun.xml.writer':
    case 'application/vnd.sun.xml.writer.template':
    case 'application/vnd.sun.xml.writer.global':
    case 'application/vnd.wordperfect':
    case 'application/x-abiword':
    case 'application/x-applix-word':
    case 'application/x-kword':
    case 'application/x-kword-crypt':
      return 'x-office-document';

      // Spreadsheet document types.
    case 'application/vnd.ms-excel':
    case 'application/vnd.ms-excel.sheet.macroEnabled.12':
    case 'application/vnd.oasis.opendocument.spreadsheet':
    case 'application/vnd.oasis.opendocument.spreadsheet-template':
    case 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
    case 'application/vnd.stardivision.calc':
    case 'application/vnd.sun.xml.calc':
    case 'application/vnd.sun.xml.calc.template':
    case 'application/vnd.lotus-1-2-3':
    case 'application/x-applix-spreadsheet':
    case 'application/x-gnumeric':
    case 'application/x-kspread':
    case 'application/x-kspread-crypt':
      return 'x-office-spreadsheet';

      // Presentation document types.
    case 'application/vnd.ms-powerpoint':
    case 'application/vnd.ms-powerpoint.presentation.macroEnabled.12':
    case 'application/vnd.oasis.opendocument.presentation':
    case 'application/vnd.oasis.opendocument.presentation-template':
    case 'application/vnd.openxmlformats-officedocument.presentationml.presentation':
    case 'application/vnd.stardivision.impress':
    case 'application/vnd.sun.xml.impress':
    case 'application/vnd.sun.xml.impress.template':
    case 'application/x-kpresenter':
      return 'x-office-presentation';

      // Compressed archive types.
    case 'application/zip':
    case 'application/x-zip':
    case 'application/stuffit':
    case 'application/x-stuffit':
    case 'application/x-7z-compressed':
    case 'application/x-ace':
    case 'application/x-arj':
    case 'application/x-bzip':
    case 'application/x-bzip-compressed-tar':
    case 'application/x-compress':
    case 'application/x-compressed-tar':
    case 'application/x-cpio-compressed':
    case 'application/x-deb':
    case 'application/x-gzip':
    case 'application/x-java-archive':
    case 'application/x-lha':
    case 'application/x-lhz':
    case 'application/x-lzop':
    case 'application/x-rar':
    case 'application/x-rpm':
    case 'application/x-tzo':
    case 'application/x-tar':
    case 'application/x-tarz':
    case 'application/x-tgz':
      return 'package-x-generic';

      // Script file types.
    case 'application/ecmascript':
    case 'application/javascript':
    case 'application/mathematica':
    case 'application/vnd.mozilla.xul+xml':
    case 'application/x-asp':
    case 'application/x-awk':
    case 'application/x-cgi':
    case 'application/x-csh':
    case 'application/x-m4':
    case 'application/x-perl':
    case 'application/x-php':
    case 'application/x-ruby':
    case 'application/x-shellscript':
    case 'text/vnd.wap.wmlscript':
    case 'text/x-emacs-lisp':
    case 'text/x-haskell':
    case 'text/x-literate-haskell':
    case 'text/x-lua':
    case 'text/x-makefile':
    case 'text/x-matlab':
    case 'text/x-python':
    case 'text/x-sql':
    case 'text/x-tcl':
      return 'text-x-script';

      // HTML aliases.
    case 'application/xhtml+xml':
      return 'text-html';

      // Executable types.
    case 'application/x-macbinary':
    case 'application/x-ms-dos-executable':
    case 'application/x-pef-executable':
      return 'application-x-executable';

      // PDF
    case 'application/pdf':
      return 'application-pdf';

    default:
      return $return;
  }
}

/**
 * Check write acces to area
 * 
 * @param unknown_type $area_id
 * @return true if access ok, false if not
 */
function area_edit_access($area_id) {
  $access = user_access('access areas');
  // check if this user has write access to the inventory
  global $user;
  $adminRecords = db_query('
	SELECT id 
	FROM area
	WHERE owner_id = :uid and id = :aid',
    array(':aid' => $area_id, ':uid' => $user->uid)
  );
  $write = $adminRecords->fetch();
  $access = $access && $write && $write->id == $area_id;
  return $access;
}

/**
 * 
 * Converts coordinates to system CH1903 (for Switzerland) or WGS84 (ROW)
 * @param integer $area_id
 */
function area_convert_coordinates($area_id) {
	$result = db_select('area', 'a')
    ->condition('id', $area_id)
    ->fields('a')
    ->execute()
    ->fetch();
    
    $lat = $result->centroid_lat;
	$lng = $result->centroid_lng;
    if($result->country == 'Schweiz' OR $result->country == 'Switzerland') {	    
	    $latsex = $lat * 3600;
	    $lngsex = $lng * 3600;
	    
	    $lathlp = ($latsex - 169028.66) / 10000 ;
	    $lnghlp = ($lngsex - 26782.5) / 10000;
	    
	    $x = 200147.07 + 308807.95 * $lathlp + 3745.25 * pow($lnghlp, 2) + 76.63 * pow($lathlp, 2) + 119.79 * pow($lathlp, 3) - 194.56 * pow($lnghlp, 2) * $lathlp;
	    $y = 600072.37 + 211455.93 * $lnghlp - 10938.51 * $lnghlp * $lathlp - 0.36 * $lnghlp * pow($lathlp, 2) - 44.54 * pow($lnghlp, 3);
	    
	    
	    $coords = substr(round($y), 0, 3).'.'.substr(round($y), 3).' / '.substr(round($x), 0, 3).'.'.substr(round($x), 3).t(' (CH1903)');
    }
    else {
    	$coords = round($lat, 3).' / '.round($lng, 4).t(' (WGS84)');
    }
    
    return $coords;  
}

function area_habitat_dropdown_values($area_id) {
	$habitats = db_select('habitat', 'h')
    ->fields('h')
    ->execute();
    
    foreach($habitats as $habitat) {
    	$dropdown[$habitat->id] = $habitat->name_de;
    }
    return $dropdown;
}

?>