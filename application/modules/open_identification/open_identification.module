<?php
/**********************************
 *  Hook implementations
 *********************************/

module_load_include('inc', 'open_identification');
module_load_include('inc', 'open_identification', 'open_identification.gallery');

/**
 * Implements hook_menu()
 *
 * @return array
 */
function open_identification_menu() {
	
  // ADMIN MENU
 /* $items['admin/config/open_identification'] = array(
    'title' => t('Configure Open Identification'),
    'description' => t('Configuration for Open Identification module'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gallery_form'),
    'access arguments' => array('administer rating types'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'open_identification.admin.inc',
  );
  $items['admin/config/open_identification/settings'] = array(
    'title' => t('Global settings'),
    'description' => t('Global configuration for the Open Identification module'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gallery_form'),
    'access arguments' => array('administer rating types'),
    'type' => MENU_DEFAULT_LOCAL_TASK | MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'open_identification.admin.inc',
  );*/
  
  $items['open_identification'] = array(
    'title' => t('Open Identifications'),
    'description' => t('Show all open identifications'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_identification_show','list view'),
    'access arguments' => array('access open identification'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'open_identification.inc',
  );
  $items['open_identification/list'] = array(
    'title' => t('All open identifications'),
    'description' => t('Show all open identifications'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_identification_show','list view'),
    'access arguments' => array('access open identification'),
    'type' => MENU_DEFAULT_LOCAL_TASK ,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'open_identification.inc',
  );
  $items['open_identification/mylist'] = array(
    'title' => t('My open identifications'),
    'description' => t('Show my open identifications'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_identification_show','mylist'),
    'access arguments' => array('access open identification'),
    'type' => MENU_LOCAL_TASK ,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'open_identification.inc',
  );
  $items['open_identification/%'] = array(
    'title' => t('Show open identification'),
    'description' => t('View an existing open identification'),
    'page callback' => 'open_identification_show_detail',
    'page arguments' => array(1),
    'access arguments' => array('access open identification'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'open_identification.inc',
  );
  /*$items['open_identification/%/view'] = array(
    'title' => t('View'),
    'description' => t('View an existing open identification'),
    'page callback' => 'open_identification_show_detail',
    'page arguments' => array(1),
    'access arguments' => array('access open identification'),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'open_identification.inc',
  );*/
  $items['open_identification/%/edit'] = array(
    'title' => t('Edit'),
    'description' => t('Edit open identification'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_identification_edit_form',1),
    'access arguments' => array('access open identification'),
	'type' => MENU_NORMAL_ITEM,
    'file' => 'open_identification.edit.inc',
  );
  $items['open_identification/new'] = array(
    'title' => t('New'),
    'description' => t('Create new open identification'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gallery_image_form','open_identification',false, 'medias',false,true),
    //'page arguments' => array('open_identification_new'),
    'access arguments' => array('access open identification'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'open_identification.new.inc',
  );
  return $items;
}
function open_identification_theme(){
	
	return array(
    'open_identification_list' => array(
 		'template' => 'open_identification_list',
      	'variables' => array('list' => NULL)
	),
	'open_identification_gallery' => array(
 		'template' => 'open_identification_gallery',
      	'variables' => array('text' => NULL)
	),
	'open_identification_details' => array(
 		'template' => 'open_identification_details',
      	'variables' => array('open_identification' => NULL)
	)
	);
	
	
}
function open_identification_save($open_identification_description,$open_identification_type,$open_identification_organismgroup){
	global $user;
	
	if($open_identification_type == "habitat")
	   $open_identification_organismgroup = null;
	else{
		
		if(!$open_identification_organismgroup)
			$open_identification_organismgroup = 'unknown';
	}
	
	$id   =  db_select('open_identification', 'oi')->orderBy('oi.open_identification_id', 'DESC')->range(0, 1)->fields('oi', array('open_identification_id'))->execute()->fetchColumn(0)+1;
	$entry = array(
			'open_identification_id' => $id,
			'user_id' => $user->uid,
			'open_identification_create_date' => 'now()',
			'open_identification_modified_date' => 'now()',
			'open_identification_comment' => $open_identification_description,
			'open_identification_type' => $open_identification_type,
			'open_identification_organismgroup' => $open_identification_organismgroup,
			'open_identification_area' => 1,
			'open_identification_solved' => 0);
	db_insert('open_identification')->fields($entry)->execute();
	
	return $id;

}
function open_identification_link_media_with_open_identification($open_identification_id,$media){
	$entry = array(
			'open_identification_id' => $open_identification_id,
			'gallery_image_id' => $media['id']);
	db_insert('open_identification_gallery')->fields($entry)->execute();
	
}
function open_identification_get_all_entries($userid=false,$criteria=false){
	
	  if($criteria){
	  	
		  $types = 'open_identification_type IN (\''.implode('\', \'',$criteria['type']).'\')';
		  $filter = false;
		  if($criteria['type']['organismgroup'])
		  	$filter = $criteria['organismgroup'] ? 'open_identification_organismgroup IN (\''.implode('\', \'',$criteria['organismgroup']).'\')':false;
	  }
	  $result = db_query('select 
	  					  oi.open_identification_id as open_identification_id,
	  					  oi.open_identification_comment as open_identification_comment,
	  					  oi.open_identification_create_date as open_identification_create_date,
	  					  oi.open_identification_modified_date as open_identification_modified_date,
	  					  oi.open_identification_type as open_identification_type,
	  					  oi.open_identification_organismgroup as open_identification_organismgroup,
	  					  fm.filemime as filemime,
	  					  fm.filename as filename,
	  					  fm.uri as uri,
	  					  gi.id as media_id,
	  					  gi.created_date as created_date,
	  					  gi.modified_date as modified_date,
	  					  gi.author as author,
	  					  oi.user_id as user_id,
	  					  fdaf.field_address_first_name fname, 
	  					  fdaf.field_address_last_name lname  
	  					  from open_identification oi
	  					  left join open_identification_gallery oig on oig.open_identification_id = oi.open_identification_id
			  			  left join gallery_image gi on gi.id = oig.gallery_image_id
						  left join file_managed fm on fm.fid = gi.fid
						  left join users u on oi.user_id = u.uid
						  LEFT JOIN field_data_field_address fdaf ON fdaf.entity_id = u.uid
						  where oi.open_identification_solved = 0'.($userid ? ' AND oi.user_id ='.$userid : '')
	  					  .($criteria ? ' AND '.$types.($filter ? ' AND '.$filter : ''):''));
	  $open_identifications = array();
	  $medias = array();
	  foreach($result as $record){
	  	
	  	$media			        			  = array();
	  	$media['media_id']					  = $record->media_id;
	  	$media['filemime']      			  = $record->filemime;
	  	$media['filename']      			  = $record->filename;
	  	$media['url']           			  = $record->uri;
	  	$media['create_date']   			  = $record->created_date;
	  	$media['modified_date'] 			  = $record->modified_date;
	  	$media['author']					  = $record->author;
	  		
		$open_identification['open_identification_id'] = $record->open_identification_id;
		$open_identification['user_id']       		   = $record->user_id;
		$open_identification['fullname']      		   = $record->fname.' '.$record->lname;
		$open_identification['create_date']   		   = $record->open_identification_create_date;
		$open_identification['modified_date'] 		   = $record->open_identification_modified_date;
		$open_identification['comment']       		   = $record->open_identification_comment;
		$open_identification['type']		  		   = $record->open_identification_type;
		$open_identification['organismgroup']		   = $record->open_identification_organismgroup;

		if($open_identification['type'] == 'habitat')
			$group = 'none';
		else
			$group = $open_identification['organismgroup'];
			
	  	$open_identifications[$open_identification['type']][$group][$record->open_identification_id]['medias'][] = $media;
	  	$open_identifications[$open_identification['type']][$group][$record->open_identification_id]['info']     = $open_identification;
	  }
	  
	  return $open_identifications;
}
function open_identification_get_entry($open_identification_id){
	
	  $result = db_query('select 
	  					  oi.open_identification_id as open_identification_id,
	  					  oi.open_identification_comment as open_identification_comment,
	  					  oi.open_identification_create_date as open_identification_create_date,
	  					  oi.open_identification_modified_date as open_identification_modified_date,
	  					  oi.open_identification_type as open_identification_type,
	  					  oi.open_identification_organismgroup as open_identification_organismgroup,
	  					  fm.filemime as filemime,
	  					  fm.filename as filename,
	  					  fm.uri as uri,
	  					  gi.created_date as created_date,
	  					  gi.modified_date as modified_date,
	  					  gi.author as author,
	  					  oi.user_id as user_id,
	  					  fdaf.field_address_first_name fname, 
	  					  fdaf.field_address_last_name lname  
	  					  from open_identification oi
	  					  left join open_identification_gallery oig on oig.open_identification_id = oi.open_identification_id
			  			  left join gallery_image gi on gi.id = oig.gallery_image_id
						  left join file_managed fm on fm.fid = gi.fid
						  left join users u on oi.user_id = u.uid
						  LEFT JOIN field_data_field_address fdaf ON fdaf.entity_id = u.uid
						  where oi.open_identification_solved = 0 AND oi.open_identification_id = :oid' ,array(':oid' => $open_identification_id));
	  foreach($result as $record){
		  $open_identification = array();
	
	  	  $open_identification['open_identification_id'] = $record->open_identification_id;
	  	  $open_identification['user_id']       		 = $record->user_id;
	  	  $open_identification['fullname']      		 = $record->fname.' '.$record->lname;
	  	  $open_identification['create_date']   		 = $record->open_identification_create_date;
	  	  $open_identification['modified_date'] 		 = $record->open_identification_modified_date;
	  	  $open_identification['comment']      			 = $record->open_identification_comment;
	  	  $open_identification['type']		  		     = $record->open_identification_type;
	  	  $open_identification['organismgroup'] 		 = $record->open_identification_organismgroup;
	  }
	  return $open_identification;
}
function open_identification_gallery_delete($media){
	
  db_delete('open_identification_gallery')->condition('gallery_image_id', $media['id'])->execute();
  return true;
	
}
function open_identification_details_update($open_identification){
	
	$values = array();
	$values['open_identification_modified_date'] = 'now()';
	$values['open_identification_comment']       = $open_identification['comment'];
	$values['open_identification_type']			 = $open_identification['type'];
	
	if($open_identification['type'] == 'organism'){
		if($values['open_identification_organismgroup'] != "")
			$values['open_identification_organismgroup'] = $open_identification['organismgroup'];
		else
			$values['open_identification_organismgroup'] = 'unknown';
	}
	
	 db_update('open_identification')
    ->condition('open_identification_id', $open_identification['open_identification_id'])
    ->fields($values)
    ->execute();
}
function open_identification_delete($open_identification_id){
	//db_query()
	db_delete('gallery_image_subtype')->condition('image_id', $image['id'])->execute();
}
?>