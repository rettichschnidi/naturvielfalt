<?php
/**********************************
 *  Hook implementations
 *********************************/

module_load_include('inc', 'open_identification');
module_load_include('inc', 'open_identification', 'open_identification.gallery');

/**
 * Implements hook_menu()
 *
 * @return array
 */
function open_identification_menu() {
	
  // ADMIN MENU
 /* $items['admin/config/open_identification'] = array(
    'title' => t('Configure Open Identification'),
    'description' => t('Configuration for Open Identification module'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gallery_form'),
    'access arguments' => array('administer rating types'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'open_identification.admin.inc',
  );
  $items['admin/config/open_identification/settings'] = array(
    'title' => t('Global settings'),
    'description' => t('Global configuration for the Open Identification module'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gallery_form'),
    'access arguments' => array('administer rating types'),
    'type' => MENU_DEFAULT_LOCAL_TASK | MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'open_identification.admin.inc',
  );*/
  
  $items['open_identification'] = array(
    'title' => t('Open Identifications'),
    'description' => t('Show all open identifications'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_identification_show','list view'),
    'access arguments' => array('access open identification'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'open_identification.inc',
  );
  $items['open_identification/list'] = array(
    'title' => t('All open identifications'),
    'description' => t('Show all open identifications'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_identification_show','list view'),
    'access arguments' => array('access open identification'),
    'type' => MENU_DEFAULT_LOCAL_TASK ,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'open_identification.inc',
  );
  $items['open_identification/mylist'] = array(
    'title' => t('My open identifications'),
    'description' => t('Show my open identifications'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_identification_show','mylist'),
    'access arguments' => array('access open identification'),
    'type' => MENU_LOCAL_TASK ,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'open_identification.inc',
  );
  $items['open_identification/%'] = array(
    'title' => t('Show open identification'),
    'description' => t('View an existing open identification'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_identification_show_detail',1),
    'access arguments' => array('access open identification'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'open_identification.inc',
  );
  $items['open_identification/%/edit'] = array(
    'title' => t('Edit'),
    'description' => t('Edit open identification'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_identification_edit_form',1),
    'access arguments' => array('access open identification'),
	'type' => MENU_NORMAL_ITEM,
    'file' => 'open_identification.edit.inc',
  );  
  $items['open_identification/%/view'] = array(
    'title' => t('View'),
    'description' => t('View an existing open identification'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_identification_show_detail',1),
    'access arguments' => array('access open identification'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'open_identification.inc',
  	'weight' => 1,
  );
  $items['open_identification/%/delete'] = array(
    'title' => t('Delete'),
    'description' => t('Delete open identification'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_identification_delete_form',1),
  	'access arguments' => array(1),
    //'access arguments' => array('access open identification'),
	'access callback' => 'open_identification_delete_access',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'open_identification.edit.inc',
  	'weight' => 2,
  );
  $items['open_identification/new'] = array(
    'title' => t('New'),
    'description' => t('Create new open identification'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gallery_image_form','open_identification',false, 'medias',false,true),
    //'page arguments' => array('open_identification_new'),
    'access arguments' => array('access open identification'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'open_identification.new.inc',
  );
  $items['open_identification/autocomplete/organisms/%'] = array(
    'title' => 'Organisms autocomplete',
    'page callback' => 'organism_type_autocomplete',
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access open identification'),
    'file' => 'open_identification.autocomplete.inc',
  );
  $items['open_identification/autocomplete/habitats'] = array(
    'title' => 'Habitats autocomplete',
    'page callback' => 'habitats_autocomplete',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access open identification'),
    'file' => 'open_identification.autocomplete.inc',
  );
  return $items;
}
function open_identification_theme(){
	
	return array(
    'open_identification_list' => array(
 		'template' => 'open_identification_list',
      	'variables' => array('list' => NULL)
	),
	'open_identification_gallery' => array(
 		'template' => 'open_identification_gallery',
      	'variables' => array('text' => NULL)
	),
	'open_identification_details' => array(
 		'template' => 'open_identification_details',
      	'variables' => array('open_identification' => NULL)
	)
	);
	
	
}
function open_identification_delete_access($open_identification_id) {
	global $user;

	if(array_key_exists(3, $user->roles))
		return true;
	else
		return false;
}
function open_identification_save($open_identification_description,$open_identification_type,$open_identification_organismgroup,$open_identification_organismgroupid){
	global $user;
	
	if($open_identification_type == "habitat"){
	   $open_identification_organismgroupid = 0;
	}
	else{
		
		if(!($open_identification_organismgroupid>0)){
			$open_identification_organismgroupid = 0;
		}
	}
	
	$id   =  db_select('open_identification', 'oi')->orderBy('oi.open_identification_id', 'DESC')->range(0, 1)->fields('oi', array('open_identification_id'))->execute()->fetchColumn(0)+1;
	$entry = array(
			'open_identification_id' => $id,
			'user_id' => $user->uid,
			'open_identification_create_date' => 'now()',
			'open_identification_modified_date' => 'now()',
			'open_identification_comment' => $open_identification_description,
			'open_identification_type' => $open_identification_type,
			'open_identification_organismgroupid' => $open_identification_organismgroupid,
			'open_identification_area' => 1,
			'open_identification_solved' => 0);
	db_insert('open_identification')->fields($entry)->execute();
	
	return $id;

}
function open_identification_link_media_with_open_identification($open_identification_id,$media){
	$entry = array(
			'open_identification_id' => $open_identification_id,
			'gallery_image_id' => $media['id']);
	db_insert('open_identification_gallery')->fields($entry)->execute();
	
}
function open_identification_get_all_entries($userid=false,$criteria=false){
	
	  $sort = ' ORDER BY open_identification_type ,open_identification_organismgroup';
	  if($criteria){
	  	
	  	  if($criteria['type']['organism'])
		  	$organism = '(open_identification_type =\''.$criteria['type']['organism'].'\'';
		  else
		  	$organism = false;
		  	
	  	  if($criteria['type']['habitat'])
		  	$habitat = 'open_identification_type =\''.$criteria['type']['habitat'].'\'';
		  else
		  	$habitat = false;
		  	
		  $filter = false;
		  if($criteria['organismgroupid'] && $organism)
		  	$filter = $criteria['organismgroupid'] ? $organism.' AND open_identification_organismgroupid IN ('.implode(',',$criteria['organismgroupid']).'))':false;
	  
		  if($criteria['sortby'] == 'bydateold')
		  	$sort = ' ORDER BY open_identification_modified_date ASC';
		  elseif($criteria['sortby'] == 'bydatenew')
		  	$sort = ' ORDER BY open_identification_modified_date DESC';
		  elseif($criteria['sortby'] == 'byuser')
		  	$sort = ' ORDER BY lname';
		  else
		  	$sort = ' ORDER BY open_identification_type ,open_identification_organismgroup';
	  }

	  $result = db_query('select 
	  					  oi.open_identification_id as open_identification_id,
	  					  oi.open_identification_comment as open_identification_comment,
	  					  oi.open_identification_create_date as open_identification_create_date,
	  					  oi.open_identification_modified_date as open_identification_modified_date,
	  					  oi.open_identification_type as open_identification_type,
	  					  oi.open_identification_organismgroupid as open_identification_organismgroupid,
	  					  it.name as open_identification_organismgroup,
	  					  fm.filemime as filemime,
	  					  fm.filename as filename,
	  					  fm.uri as uri,
	  					  gi.id as media_id,
	  					  gi.created_date as created_date,
	  					  gi.modified_date as modified_date,
	  					  gi.author as author,
	  					  oi.user_id as user_id,
	  					  fdaf.field_address_first_name fname, 
	  					  fdaf.field_address_last_name lname  
	  					  from open_identification oi
	  					  left join open_identification_gallery oig on oig.open_identification_id = oi.open_identification_id
			  			  left join gallery_image gi on gi.id = oig.gallery_image_id
						  left join file_managed fm on fm.fid = gi.fid
						  left join users u on oi.user_id = u.uid
						  LEFT JOIN field_data_field_address fdaf ON fdaf.entity_id = u.uid
						  LEFT JOIN inventory_type it ON it.id = oi.open_identification_organismgroupid
						  where oi.open_identification_solved = 0'.($userid ? ' AND oi.user_id ='.$userid : '')
	  					  .($filter ? ' AND '.$filter : '').($habitat ? ($filter ? ' OR '.$habitat:' AND '.$habitat):'').$sort);
	  $open_identifications = array();
	  $medias = array();
	  foreach($result as $record){
	  	
	  	$media			        			  = array();
	  	$media['media_id']					  = $record->media_id;
	  	$media['filemime']      			  = $record->filemime;
	  	$media['filename']      			  = $record->filename;
	  	$media['url']           			  = $record->uri;
	  	$media['create_date']   			  = $record->created_date;
	  	$media['modified_date'] 			  = $record->modified_date;
	  	$media['author']					  = $record->author;
	  		
		$open_identification['open_identification_id'] = $record->open_identification_id;
		$open_identification['user_id']       		   = $record->user_id;
		$open_identification['fullname']      		   = $record->fname.' '.$record->lname;
		$open_identification['create_date']   		   = $record->open_identification_create_date;
		$open_identification['modified_date'] 		   = $record->open_identification_modified_date;
		$open_identification['comment']       		   = trim($record->open_identification_comment);
		$open_identification['type']		  		   = trim($record->open_identification_type);
		$open_identification['organismgroupid']		   = $record->open_identification_organismgroupid;
  	  	if($record->open_identification_organismgroupid)
  	  		$open_identification['organismgroup'] 		 = trim($record->open_identification_organismgroup);
  	  	else{
  	  	
  	  		if($open_identification['type']	== 'organism')
  	  			$open_identification['organismgroup'] 		 = 'unknown';
  	  	}
		

		if($open_identification['type'] == 'habitat')
			$group = 'none';
		else
			$group = trim($open_identification['organismgroup']);
			
	  	$open_identifications[$open_identification['type']][$group][$record->open_identification_id]['medias'][] = $media;
	  	$open_identifications[$open_identification['type']][$group][$record->open_identification_id]['info']     = $open_identification;
	  }
	  
	  return $open_identifications;
}
function open_identification_get_entry($open_identification_id){
	
	  $result = db_query('select 
	  					  oi.open_identification_id as open_identification_id,
	  					  oi.open_identification_comment as open_identification_comment,
	  					  oi.open_identification_create_date as open_identification_create_date,
	  					  oi.open_identification_modified_date as open_identification_modified_date,
	  					  oi.open_identification_type as open_identification_type,
	  					  oi.open_identification_organismgroupid as open_identification_organismgroupid,
	  					  it.name as open_identification_organismgroup,
	  					  fm.filemime as filemime,
	  					  fm.filename as filename,
	  					  fm.uri as uri,
	  					  gi.created_date as created_date,
	  					  gi.modified_date as modified_date,
	  					  gi.author as author,
	  					  oi.user_id as user_id,
	  					  fdaf.field_address_first_name fname, 
	  					  fdaf.field_address_last_name lname  
	  					  from open_identification oi
	  					  left join open_identification_gallery oig on oig.open_identification_id = oi.open_identification_id
			  			  left join gallery_image gi on gi.id = oig.gallery_image_id
						  left join file_managed fm on fm.fid = gi.fid
						  left join users u on oi.user_id = u.uid
						  LEFT JOIN field_data_field_address fdaf ON fdaf.entity_id = u.uid
						  LEFT JOIN inventory_type it ON it.id = oi.open_identification_organismgroupid
						  where oi.open_identification_solved = 0 AND oi.open_identification_id = :oid' ,array(':oid' => $open_identification_id));
	  foreach($result as $record){
		  
		  $open_identification = array();
	  	  $open_identification['open_identification_id'] = $record->open_identification_id;
	  	  $open_identification['user_id']       		 = $record->user_id;
	  	  $open_identification['fullname']      		 = $record->fname.' '.$record->lname;
	  	  $open_identification['create_date']   		 = $record->open_identification_create_date;
	  	  $open_identification['modified_date'] 		 = $record->open_identification_modified_date;
		  $open_identification['comment']       		 = trim($record->open_identification_comment);
		  $open_identification['type']		  		     = trim($record->open_identification_type);
	  	  $open_identification['organismgroupid']		 = $record->open_identification_organismgroupid;
	      if($record->open_identification_organismgroupid)
  	  			$open_identification['organismgroup'] 		 = trim($record->open_identification_organismgroup);
  	  	  else{
  	  	
  	  		if($open_identification['type']	== 'organism')
  	  			$open_identification['organismgroup'] 		 = 'unknown';
  	  	  }	
	  	  
	  }
	  return $open_identification;
}
function open_identification_gallery_delete($media){
	
  db_delete('open_identification_gallery')->condition('gallery_image_id', $media['id'])->execute();
  return true;
	
}
function open_identification_details_update($open_identification){

	$values = array();
	$values['open_identification_modified_date'] = 'now()';
	$values['open_identification_comment']       = $open_identification['comment'];
	$values['open_identification_type']			 = $open_identification['type'];
	
	if($open_identification['type'] == 'organism'){
		if($open_identification['organismgroup'] != "")
			$values['open_identification_organismgroupid'] = $open_identification['organismgroup'];
		else
			$values['open_identification_organismgroupid'] = 0;
	}

	 db_update('open_identification')
    ->condition('open_identification_id', $open_identification['open_identification_id'])
    ->fields($values)
    ->execute();
}
function open_identification_delete($open_identification_id){
	  
	 $files = db_select('gallery_image', 'gi')
	    ->condition('item_id', $open_identification_id)
	    ->condition('item_type','open_identification')
	    ->fields('gi', array('fid'))
	    ->execute()
	    ->fetchCol(0);
	  foreach($files as $fid)
	    file_delete(file_load($fid));
	    
	  $images = db_query('SELECT gi.id as id,gi.fid as fid FROM gallery_image gi
	  								   INNER JOIN file_managed fm on fm.fid = gi.fid
	  								   WHERE gi.item_type = \'open_identification\' AND gi.item_id = :id',
	  								   array(':id' =>$open_identification_id));
	  foreach($images as $image){
	  	$delete_image['id'] = $image->id;
	  	$delete_image['fid'] = $image->fid;
	    gallery_image_delete($delete_image);
	  }
	    
	  db_delete('open_identification_tip')
	    ->condition('open_identification_id', $open_identification_id)
	    ->execute();
	  db_delete('open_identification_gallery')
	    ->condition('open_identification_id', $open_identification_id)
	    ->execute();
	  db_delete('open_identification')
	    ->condition('open_identification_id', $open_identification_id)
	    ->execute();
	  
	  drupal_set_message(t('The open identification was successfully deleted'));
}
function open_identification_insert_tip($open_identification_tip){
	
	global $user;
	
	$entry = array(
			'user_id' => $user->uid,
			'open_identification_id' => $open_identification_tip['open_identification_id'],
			'open_identification_type' => $open_identification_tip['open_identification_type'],
			'open_identification_tip_organismgroupid' => $open_identification_tip['organismgroupid'],
			'open_identification_tip_date' => 'now()',
			'open_identification_tip_item_id' => $open_identification_tip['item_id']);
	db_insert('open_identification_tip')->fields($entry)->execute();
	
}
function open_identification_get_item_id($type,$organismgroupid,$name){
	
	  if($type == 'habitat'){
	  
	  	$result = db_query('SELECT id FROM habitat where name_de = :name LIMIT 1',array(':name' => $name));
		
	  	foreach($result as $row)
			$id = $row->id;

		return $id;
	  }
	  else{
	  	
	  	if($organismgroupid == 16)
	  		$sql = "SELECT o.id as id FROM organism o 
	  						 LEFT JOIN flora_organism flo ON o.organism_id = flo.id
	  						 WHERE o.organism_type = 2 AND flo.name_de = :name LIMIT 1";
	  	else
			$sql = "SELECT o.id as id FROM organism o 
	  						 LEFT JOIN fauna_organism fo ON o.organism_id = fo.id
	  						 WHERE o.organism_type = 1 AND fo.name_de = :name LIMIT 1";
	  
	  	$result = db_query($sql,array(':name' => $name));
	  	
	  	foreach($result as $row)
			$id = $row->id;

		return $id;
	  }
	
}
function open_identification_get_tips($open_identification_id,$organismgroupid,$type){
	
	if($type == 'habitat'){
		
		$sql = 'SELECT ha.name_de as name_de,
       				   oit.open_identification_id as open_identification_id,
       				   oit.open_identification_tip_item_id as item_id,
       				   COUNT(oit.open_identification_tip_item_id) as count_item_id, 
       				   (SELECT COUNT(*) FROM open_identification_tip where open_identification_id = :id) as count_all,
					   ROUND(((COUNT(oit.open_identification_tip_item_id)*100.00/(SELECT COUNT(*) FROM open_identification_tip where open_identification_id = 1))),2) as percentage    
				FROM open_identification_tip oit
				LEFT JOIN habitat ha on ha.id = oit.open_identification_tip_item_id
				WHERE oit.open_identification_type = \'habitat\' AND oit.open_identification_id = :id
				GROUP BY item_id, ha.name_de,open_identification_id
				ORDER BY percentage desc';
	}
	else{
		
		if($organismgroupid == 16)
			
			$sql = 'SELECT oit.open_identification_id as open_identification_id,
       					   oit.open_identification_tip_item_id as item_id,
       					   oit.open_identification_tip_organismgroupid as organismgroupid,
       					   it.name as organismgroup,
       					   flo.name_de as name_de,
       					   flo."Familie" as family,
                           flo."Gattung" as genus,
       					   flo."Art" as species,
       					   COUNT(oit.open_identification_tip_item_id) as count_item_id, 
       					   (SELECT COUNT(*) FROM open_identification_tip where open_identification_id = :id) as count_all,
       					   ROUND(((COUNT(oit.open_identification_tip_item_id)*100.00/(SELECT COUNT(*) FROM open_identification_tip where open_identification_id = :id))),2) as percentage
						   FROM open_identification_tip oit
						   LEFT JOIN organism o on o.id = oit.open_identification_tip_item_id
						   LEFT JOIN flora_organism flo on flo.id = o.organism_id
						   LEFT JOIN inventory_type it on it.id = oit.open_identification_tip_organismgroupid
						   WHERE oit.open_identification_type = \'organism\' AND oit.open_identification_tip_organismgroupid = 16
						   AND oit.open_identification_id = :id 
						   GROUP BY oit.open_identification_id,
						   			oit.open_identification_tip_item_id,
						   			flo.name_de,
						   			flo."Familie",
						   			flo."Gattung",
						   			flo."Art",
						   			oit.open_identification_tip_organismgroupid,
						   			it.name
						   ORDER BY percentage desc';
		else
			$sql = 'SELECT oit.open_identification_id as open_identification_id,
					       oit.open_identification_tip_item_id as item_id,
					       oit.open_identification_tip_organismgroupid as organismgroupid,
					       it.name as organismgroup,
					       fo.name_de as name_de,
					       fo.order as order,
					       fo.family as family,
					       fo.genus as genus,
					       fo.species as species,
					       COUNT(oit.open_identification_tip_item_id) as count_item_id, 
					       (SELECT COUNT(*) FROM open_identification_tip where open_identification_id = :id) as count_all,
					       ROUND(((COUNT(oit.open_identification_tip_item_id)*100.00/(SELECT COUNT(*) FROM open_identification_tip where open_identification_id = :id))),2) as percentage
						   FROM open_identification_tip oit
						   LEFT JOIN organism o on o.id = oit.open_identification_tip_item_id
						   LEFT JOIN fauna_organism fo on fo.id = o.organism_id
						   LEFT JOIN inventory_type it on it.id = oit.open_identification_tip_organismgroupid
						   WHERE oit.open_identification_type = \'organism\' AND oit.open_identification_tip_organismgroupid <> 16
						   AND oit.open_identification_id = :id
						   GROUP BY oit.open_identification_id,oit.open_identification_tip_item_id,
						   			fo.name_de,fo.order,
						   			fo.family,
							 		fo.genus,fo.species,
							 		oit.open_identification_tip_organismgroupid,
							 		it.name
						   ORDER BY percentage desc';
		
	}
	$result = db_query($sql,array(':id' => $open_identification_id));
	$open_identification_tips = array();
	
	foreach($result as $row){
		
		$open_identification_tip['id']      		= $row->open_identification_tip_id;
		$open_identification_tip['item_id'] 		= $row->item_id;
		$open_identification_tip['type']    		= $type;
		$open_identification_tip['organismgroupid'] = $row->organismgroupid;
		$open_identification_tip['organismgroup']   = $row->organismgroup;
		$open_identification_tip['usernum']			= $row->count_item_id;
		$open_identification_tip['overallnum']		= $row->count_all;
		$open_identification_tip['item_name']		= $row->name_de;
		$open_identification_tip['family']			= $row->family;
		$open_identification_tip['genus']			= $row->genus;
		$open_identification_tip['species']			= $row->species;
		$open_identification_tip['percentage']		= $row->percentage;
		
		$open_identification_tips[]					= $open_identification_tip;
		
	}
	return $open_identification_tips;
}
function open_identification_save_suggestion($open_identification_id,$item_id,$item_type){
	
	$num = db_update('gallery_image')->fields(array('item_type' => $item_type,
    												'item_id' => $item_id,))
									 ->condition('item_type','open_identification' , '=')
									 ->condition('item_id',$open_identification_id, '=')
 									 ->execute();
 	
 	if($num>0){
 		$num2 = db_update('open_identification')->fields(array('open_identification_solved' => 1,))
									 		   ->condition('open_identification_id',$open_identification_id, '=')
 									 		   ->execute();
 		if(!($num2 > 0))
 			form_set_error('save_suggestion','DB Error: open identification could not be set as solved');
 	}
	else{
		
		form_set_error('save_suggestion','DB Error: Suggestion could not be saved');
	}
		
	
}
?>