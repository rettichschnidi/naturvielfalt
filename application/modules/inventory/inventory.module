<?php
/**********************************
 *  Hook implementations
 *********************************/

module_load_include('inc', 'inventory');

/**
 * Implements hook_menu()
 *
 * @return array
 */
function inventory_menu() {
  $items['inventory'] = array(
    'title' => t('Inventories'),
    'description' => t('Show all inventories'),
    'page callback' => 'inventory_list',
    'access arguments' => array('access inventories'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'inventory.list.inc',
  );
  $items['inventory/%'] = array(
    'title' => t('Show Inventory'),
    'description' => t('View an existing inventory'),
    'page callback' => 'inventory_show',
    'page arguments' => array(1),
    'access callback' => 'inventory_access',
    'access arguments' => array(1),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'inventory.show.inc',
  );
  $items['inventory/%/normal'] = array(
    'title' => t('View'),
    'description' => t('View of the inventory'),
    'page callback' => 'inventory_show',
    'page arguments' => array(1),
    'access callback' => 'inventory_access',
    'access arguments' => array(1),
    'type' => MENU_DEFAULT_LOCAL_TASK | MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'inventory.show.inc',
    'weight' => 1,
  );
  $items['inventory/%/gallery'] = array(
    'title' => t('Gallery'),
    'description' => t('View the inventory as gallery of organisms'),
    'page callback' => 'inventory_gallery',
    'page arguments' => array(1),
    'access callback' => 'inventory_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'inventory.show.inc',
    'weight' => 2,
  );
  $items['inventory/%/list'] = array(
    'title' => t('List'),
    'description' => t('View the inventory as a list of organisms'),
    'page callback' => 'inventory_list',
    'page arguments' => array(1),
    'access callback' => 'inventory_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'inventory.show.inc',
    'weight' => 3,
  );
  $items['inventory/edit'] = array(
    'title' => t('Edit Inventories'),
    'description' => t('Show all inventories to edit'),
    'page callback' => 'inventory_modify',
    'access arguments' => array('access inventories'),
    'file' => 'inventory.edit.list.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 5,
  );
  $items['inventory/new/area/%'] = array(
  'title' => t('Create Inventory'),
    'description' => t('Create a new inventory'),
    'page callback' => 'inventory_new',
    'page arguments' => array(3),
    'access arguments' => array('access inventories'),
    'file' => 'inventory.new.inc',
    'weight' => 0,
  );
  $items['inventory/organism_autocomplete'] = array(
    'title' => 'Organism Autocomplete',
    'description' => 'JSON Organism Autocomplete',
    'page callback' => 'inventory_organism_autocomplete',
    'access arguments' => array('access inventories'),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.ajax.inc',
  );
  $items['inventory/add_inventory/%'] = array(
    'title' => 'Add Inventory Category',
    'description' => 'JSON Inventory Category Adder',
    'page callback' => 'inventory_add_inventory',
    'page arguments' => array(2),
    'access arguments' => array('access inventories'),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.ajax.inc',
  );
  $items['inventory/%/edit'] = array(
    'title' => t('Edit'),
    'description' => t('Edit an existing inventory'),
    'page callback' => 'inventory_edit',
    'page arguments' => array(1),
    'access callback' => 'inventory_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'inventory.edit.inc',
    'weight' => 10,
  );
  $items['inventory/%/entries_ajax'] = array(
    'title' => 'Entries Ajax Request',
    'description' => 'JSON Entries Ajax Request',
    'page callback' => 'inventory_entries_ajax',
    'access callback' => 'inventory_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.ajax.inc',
  );
  $items['inventory/%/sgroup_autocomplete'] = array(
    'title' => 'sgroup autocomplete',
    'page callback' => 'inventory_sgroup_autocomplete',
    'access callback' => 'inventory_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.ajax.inc',
  );
  $items['inventory/%/delete_sgroup/%'] = array(
    'title' => 'JSON request to delete a group from permission list',
    'page callback' => 'inventory_delete_sgroup',
    'page arguments' => array(1, 3),
    'access callback' => 'inventory_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.ajax.inc',
  );
  return $items;
}

/**
 * Implements hook of gallery module to activate the gallery
 * functionality for inventory_entries
 * 
 * @return array
 */
function inventory_gallery_types() {
  return array(
    'inventory_entry' => array(
      'edit_gallery' => 'inventory_gallery_access_callback',
      'image_caption' => 'inventory_gallery_image_caption',
      'manage_title' => 'inventory_gallery_manage_title',
      'manage_description' => 'inventory_gallery_manage_description',
      'subtypes' => array(
        'presentation' => t('Presentational images')
      ),
      'condition' => 'inventory_gallery_condition'
    ),
    'head_inventory' => array(
      'edit_gallery' => 'gallery_owner_access_callback',
      'image_caption' => 'inventory_head_gallery_image_caption',
      'manage_title' => 'inventory_head_gallery_manage_title',
      'manage_description' => 'inventory_head_gallery_manage_description'
    )
  );
}

/**
 * Helper function referenced in inventory_gallery_types to filter out 
 * images of red listed organisms.
 * 
 * @return string SQL condition 
 *  which excludes images bound to inventory entries of red listed organisms
 *  based on the permissions of the current user
 */
function inventory_gallery_condition() {
  $protected = inventory_redlisted_entries();
  if(!$protected)
    return false;
  return '(gi.item_type != \'inventory_entry\' OR NOT gi.item_id IN ('.implode(', ', $protected).'))';
}

/**
 * Helper function to get a list of inventory entry ids to exclude
 * for the current user since they are on a red list
 * 
 * @return array 
 *  List of inventory entry ids to exclude for the current user
 * @param object $head_inventory_id[optional]
 *  Only return the ids of the specified head inventory
 * @param object $inventory_id[optional]
 *  Only return the ids of the specified inventory
 */
function inventory_redlisted_entries($head_inventory_id=false, $inventory_id=false) {
  global $user;
  $query = db_select('inventory_entry', 'ie');
  $query->join('inventory', 'i', 'i.id = ie.inventory_id');
  $query->join('head_inventory', 'hi', 'hi.id = i.head_inventory_id');
  $query->join('organism', 'o', 'o.id = ie.organism_id');
  $query->leftJoin('fauna_organism', 'fauna', 'fauna.id = o.organism_id');
  $query->leftJoin('flora_organism', 'flora', 'flora.id = o.organism_id');
  $query->leftJoin('flora_red_list', 'frl', 'frl.flora_organism_id = o.organism_id');
  if($inventory_id)
    $query->condition('i.id', $inventory_id);
  if($head_inventory_id)
    $query->condition('hi.id', $head_inventory_id);
  $query->condition(db_and()
    ->condition(db_and()
      ->condition('hi.owner_id', $user->uid, '!=')
      ->where('NOT EXISTS ('.
        'SELECT sgu.uid FROM '.
          '{sgroup_users} sgu '.
        'INNER JOIN {sgroup_inventory} sgi ON sgi.sgid = sgu.sgid '.
        'WHERE sgi.show_red = 1 AND sgi.hiid = hi.id AND sgu.uid = :uid)', array(':uid' => $user->uid)))
    ->condition(db_or()
      ->condition(db_and()
        ->condition('fauna.protection_ch', '0', '>')
        ->condition('o.organism_type', '1'))
      ->condition(db_and()
        ->condition('frl.red_list_ch', '0', '>')
        ->condition('o.organism_type', '2'))));
  $query->addField('ie', 'id');
  $result = $query->execute();
  $protected = array();
  foreach($result as $record)
    array_push($protected, $record->id);
  return $protected;
}

/**
 * Check if user is allowed to display red list organisms -> either by owning the inventory or group permissions
 * 
 * @return boolean
 * @param object $head_inventory_id
 */
function inventory_user_has_redlist_permission($head_inventory_id) {
  global $user;
  //query group membership of user
  $query = db_select('head_inventory', 'hi');
  $query->condition('hi.id', $head_inventory_id);
  $query->condition(db_or()
    ->condition('hi.owner_id', $user->uid)
    ->where('EXISTS ('.
              'SELECT sgu.uid FROM '.
                '{sgroup_users} sgu '.
              'INNER JOIN {sgroup_inventory} sgi ON sgi.sgid = sgu.sgid '.
              'WHERE sgi.show_red = 1 AND sgi.hiid = hi.id AND sgu.uid = :uid)', array(':uid' => $user->uid)));
  $query->addField('hi', 'id');
  return $query->execute()->rowCount() > 0;
}

/**
 * Helper function referenced in inventory_gallery_types to define the edit access
 * for images added to intentory entries
 * 
 * @param string $type
 *   The type of object to be accessed
 * @param string $id
 *   The id of object to be accessed
 * @param array $image
 *   The image to be accessed.
 * @return boolean
 */
function inventory_gallery_access_callback($type, $id, $image=false) {
  $query = db_select('inventory_entry', 'ie')->condition('ie.id', $id);
  $query->join('inventory', 'i', 'i.id = ie.inventory_id');
  $query->fields('i', array('head_inventory_id'));
  $result = $query->execute()->fetch();
  return inventory_edit_access($result->head_inventory_id);
}

/**
 * Helper function referenced in inventory_gallery_types to define the caption
 * for images added to intentory entries
 * 
 * @param string $id
 *   The id of object
 * @return string
 */
function inventory_gallery_image_caption($id) {
  $result = db_select('inventory_entry', 'ie')
    ->condition('id', $id)
    ->fields('ie', array('organism_id'))
    ->execute()
    ->fetch();
  return l(organism_gallery_image_caption($result->organism_id), 'organism/'.$result->organism_id, array('html' => true));
}

/**
 * Helper function referenced in inventory_gallery_types to define the title of 
 * the manage images page for intentory entries
 * 
 * @param string $id
 *   The id of object
 * @return string
 */
function inventory_gallery_manage_title($id) {
  $query = db_select('inventory_entry', 'ie')->condition('ie.id', $id);
  $query->join('inventory', 'i', 'i.id = ie.inventory_id');
  $query->join('head_inventory', 'h', 'h.id = i.head_inventory_id');
  $query->fields('ie', array('organism_id'));
  $query->fields('h', array('id', 'area_id'));
  $result = $query->execute()->fetch();
  return t('Images of the organism !title<br>observed in the inventory !context', array(
    '!title' => '<em>'.organism_gallery_image_caption($result->organism_id).'</em>',
    '!context' => '<em>'.inventory_head_gallery_caption($result->id).'</em>'
  ));
}

/**
 * Helper function referenced in inventory_gallery_types to define the description of 
 * the manage images page for intentory entries
 * 
 * @param string $id
 *   The id of object
 * @return string
 */
function inventory_gallery_manage_description($id) {
  return t('Add and edit images of the specified organism taken in the area of this inventory.');
}

/**
 * Helper function referenced in inventory_gallery_types to define the caption
 * for images added to head intentories
 * 
 * @return string
 */
function inventory_head_gallery_image_caption($id) {
  $result = db_select('head_inventory', 'h')
    ->condition('id', $id)
    ->fields('h', array('id', 'name', 'area_id'))
    ->execute()
    ->fetch();
  return l($result->name, 'inventory/'.$result->id).' ['.l(area_gallery_caption($result->area_id), 'area/'.$result->area_id, array('html' => true)).']';
}

/**
 * Helper function referenced in inventory_gallery_types to define the title of 
 * the manage images page for head intentories
 * 
 * @param string $id
 *   The id of object
 * @return string
 */
function inventory_head_gallery_manage_title($id) {
  return t('Images of the inventory !title', array('!title' => '<em>'.inventory_head_gallery_caption($id).'</em>'));
}

/**
 * Helper function creating a generic caption for a head inventory
 * 
 * @param string $id
 *   The id of object
 * @return string
 */
function inventory_head_gallery_caption($id) {
  $result = db_select('head_inventory', 'h')
    ->condition('id', $id)
    ->fields('h', array('id', 'name', 'area_id'))
    ->execute()
    ->fetch();
  return $result->name.' ['.area_gallery_caption($result->area_id).']';
}

/**
 * Helper function referenced in inventory_gallery_types to define the description of 
 * the manage images page for head intentories
 * 
 * @param string $id
 *   The id of object
 * @return string
 */
function inventory_head_gallery_manage_description($id) {
  return t('Add and edit generic images of this inventory\'s area which are not related to any organism.');
}

/**
 * Implements hook of gallery module to define the conversion of a inventory entry
 * to the related organism and head inventory to the related area
 * 
 * @return array
 */
function inventory_gallery_type_conversions() {
  return array(
    array(
      array(
        'source' => 'inventory_entry',
        'source_key' => 'organism_id',
        'target' => 'organism',
        'target_key' => 'id',
        'subtype' => 'presentation'
      )
    ),
    array(
      array(
        'source' => 'head_inventory',
        'source_key' => 'area_id',
        'target' => 'area',
        'target_key' => 'id',
      )
    ),
    array(
      array(
        'source' => 'inventory_entry',
        'source_key' => 'inventory_id',
        'target' => 'inventory',
        'target_key' => 'id',
      ),
      array(
        'source' => 'inventory',
        'source_key' => 'head_inventory_id',
        'target' => 'head_inventory',
        'target_key' => 'id',
      )
    ),
  );
}

/**
 * Implements hook of gallery module to define the different category
 * conditions available for inventory types
 * 
 * @return array
 */
function inventory_gallery_category_conditions() {
  return array(
    'inventory_entry' => array(
      'name' => t('Inventory entries'),
      'type' => 'inventory_entry'
    ),
  );
}

/**
 * Default permission function
 * 
 */
function inventory_permission() {
  return array(
    'access inventories' =>  array(
      'title' => t('can view inventories'),
    ),
    'create inventories' =>  array(
      'title' => t('can create inventories'),
    ),
  );
}

/**
 * Check write acces to inventory
 * 
 * @param unknown_type $inventoryId
 * @return true if access ok, false if not
 */
function inventory_edit_access($inventoryId) {
  $access = user_access('access inventories');
  // check if this user has write access to the inventory
  global $user;
  $adminRecords = db_query('
    SELECT id FROM head_inventory hi
    LEFT JOIN sgroup_inventory sgi ON sgi.hiid = hi.id
    LEFT JOIN sgroup_users sgu ON sgi.sgid = sgu.sgid
    WHERE (sgu.uid = :uid AND sgi.hiid = :hiid AND sgi.write = 1)
    OR (hi.owner_id = :uid AND hi.id = :hiid)
    ORDER BY write DESC LIMIT 1',
    array(':hiid' => $inventoryId, ':uid' => $user->uid)
  );
  $write = $adminRecords->fetch();
  $access = $access && $write && $write->id == $inventoryId;
  return $access;
}

/**
 * Check read acces to inventory
 * 
 * @param unknown_type $inventoryId
 * @return true if access ok, false if not
 */
function inventory_access($inventoryId) {
  $access = user_access('access inventories');
  // check if this user has read access to the inventory or the inventory is public
  global $user;
  $adminRecords = db_query('
    SELECT sgi.read, hi.shared, id, hi.owner_id 
    FROM head_inventory hi
    LEFT JOIN sgroup_inventory sgi ON sgi.hiid = hi.id
    LEFT JOIN sgroup_users sgu ON sgi.sgid = sgu.sgid
    WHERE (sgu.uid = :uid AND sgi.hiid = :hiid AND sgi.read = 1)
    OR (hi.owner_id = :uid AND hi.id = :hiid)
    OR (hi.shared = true AND hi.id = :hiid)
    ORDER BY write DESC LIMIT 1;', array(':hiid' => $inventoryId, ':uid' => $user->uid)
  );
  $read = $adminRecords->fetch();
  $access = $access && (($read->read == 1) || ($read->shared == true)) || ($read->owner_id == $user->uid);
  return $access;
}

?>