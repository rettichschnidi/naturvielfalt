<?php
/**********************************
 *  Hook implementations
 *********************************/

module_load_include('inc', 'inventory');

/**
 * Implements hook_menu()
 *
 * @return array
 */
function inventory_menu() {
	$items['inventory'] = array(
    'title' => 'Show Inventory',
    'description' => 'Show all inventories',
    'page callback' => 'inventory_list',
    'access arguments' => array('access inventories'),
	'file' => 'inventory.list.inc',
	);
	$items['inventory/%'] = array(
    'title' => 'Show Inventory',
    'description' => 'View an existing inventory',
    'page callback' => 'inventory_show',
	'page arguments' => array(1),
	'access callback' => 'inventory_access',
	'access arguments' => array(1),
    'type' => MENU_CALLBACK,
	'file' => 'inventory.show.inc',
	);
	$items['inventory/edit'] = array(
	'title' => 'Modify Inventory',
	'description' => 'Show all inventories to modify',
	'page callback' => 'inventory_modify',
	'access arguments' => array('access inventories'),
	'file' => 'inventory.edit.list.inc',
    'weight' => 5,
	);
	$items['inventory/new/area/%'] = array(
	'title' => 'Create Inventory',
    'description' => 'Create a new inventory',
    'page callback' => 'inventory_new',
    'page arguments' => array(3),
    'access arguments' => array('access inventories'),
	'file' => 'inventory.new.inc',
	'weight' => 0,
	);
	$items['inventory/organism_autocomplete'] = array(
    'title' => 'Organism Autocomplete',
    'description' => 'JSON Organism Autocomplete',
    'page callback' => 'inventory_organism_autocomplete',
    'access arguments' => array('access inventories'),
    'type' => MENU_CALLBACK,
	'file' => 'inventory.ajax.inc',
	);
	$items['inventory/add_inventory/%'] = array(
    'title' => 'Add Inventory Category',
    'description' => 'JSON Inventory Category Adder',
    'page callback' => 'inventory_add_inventory',
	'page arguments' => array(2),
    'access arguments' => array('access inventories'),
    'type' => MENU_CALLBACK,
	'file' => 'inventory.ajax.inc',
	);
	$items['inventory/%/edit'] = array(
    'title' => 'Modify Inventory',
    'description' => 'Modify an existing inventory',
    'page callback' => 'inventory_edit',
    'page arguments' => array(1),
	'access callback' => 'inventory_edit_access',
    'access arguments' => array(1),
    'type' => MENU_NORMAL_ITEM,
	'file' => 'inventory.edit.inc',
	);
	$items['inventory/%/entries_ajax'] = array(
    'title' => 'Entries Ajax Request',
    'description' => 'JSON Entries Ajax Request',
    'page callback' => 'inventory_entries_ajax',
	'access callback' => 'inventory_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
	'file' => 'inventory.ajax.inc',
	);
	$items['inventory/%/sgroup_autocomplete'] = array(
	'title' => 'sgroup autocomplete',
    'page callback' => 'inventory_sgroup_autocomplete',
	'access callback' => 'inventory_edit_access',
	'access arguments' => array(1),
	'type' => MENU_CALLBACK,
	'file' => 'inventory.ajax.inc',
	);
	$items['inventory/%/delete_sgroup/%'] = array(
	'title' => 'JSON request to delete a group from permission list',
	'page callback' => 'inventory_delete_sgroup',
	'page arguments' => array(1, 3),
	'access callback' => 'inventory_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.ajax.inc',
	);
  
  	return $items;
}

/**
 * Implements hook of gallery module to activate the gallery
 * functionality for inventory_entries
 * 
 * @return array
 */
function inventory_gallery_types() {
  return array(
    'inventory_entry' => array(
      'edit_gallery' => 'inventory_gallery_access_callback',
      'image_caption' => 'inventory_gallery_image_caption'
    ),
    'head_inventory' => array(
      'edit_gallery' => 'gallery_owner_access_callback',
      'image_caption' => 'inventory_head_gallery_image_caption'
    )
  );
}

/**
 * Helper function referenced in inventory_gallery_types to define the edit access
 * for images added to intentory entries
 * 
 * @param string $type
 *   The type of object to be accessed
 * @param string $id
 *   The id of object to be accessed
 * @param array $image
 *   The image to be accessed.
 * @return boolean
 */
function inventory_gallery_access_callback($type, $id, $image=false) {
  $query = db_select('inventory_entry', 'ie')->condition('ie.id', $id);
  $query->join('inventory', 'i', 'i.id = ie.inventory_id');
  $query->fields('i', array('head_inventory_id'));
  $result = $query->execute()->fetch();
  return inventory_edit_access($result->head_inventory_id);
}

/**
 * Helper function referenced in inventory_gallery_types to define the caption
 * for images added to intentory entries
 * 
 * @return string
 */
function inventory_gallery_image_caption($id) {
  $result = db_select('inventory_entry', 'ie')
    ->condition('id', $id)
    ->fields('ie', array('organism_id'))
    ->execute()
    ->fetch();
  return l(organism_gallery_image_caption($result->organism_id), 'organism/'.$result->organism_id, array('html' => true));
}

/**
 * Helper function referenced in inventory_gallery_types to define the caption
 * for images added to head intentories
 * 
 * @return string
 */
function inventory_head_gallery_image_caption($id) {
  $result = db_select('head_inventory', 'h')
    ->condition('id', $id)
    ->fields('h', array('id', 'name', 'area_id'))
    ->execute()
    ->fetch();
  return l($result->name, 'inventory/'.$result->id).' ['.l(area_gallery_image_caption($result->area_id), 'area/'.$result->area_id, array('html' => true)).']';
}

/**
 * Implements hook of gallery module to define the conversion of a inventory entry
 * to the related organism and head inventory to the related area
 * 
 * @return array
 */
function inventory_gallery_type_conversions() {
  return array(
    array(
      array(
        'source' => 'inventory_entry',
        'source_key' => 'organism_id',
        'target' => 'organism',
        'target_key' => 'id',
      )
    ),
    array(
      array(
        'source' => 'head_inventory',
        'source_key' => 'area_id',
        'target' => 'area',
        'target_key' => 'id',
      )
    ),
    array(
      array(
        'source' => 'inventory_entry',
        'source_key' => 'inventory_id',
        'target' => 'inventory',
        'target_key' => 'id',
      ),
      array(
        'source' => 'inventory',
        'source_key' => 'head_inventory_id',
        'target' => 'head_inventory',
        'target_key' => 'id',
      )
    ),
  );
}

/**
 * Implements hook of gallery module to define the different category
 * conditions available for inventory types
 * 
 * @return array
 */
function inventory_gallery_category_conditions() {
  return array(
    'inventory_entry' => array(
      'name' => t('Inventory entries'),
      'type' => 'inventory_entry'
    ),
  );
}

/**
 * Default permission function
 * 
 */
function inventory_permission() {
  return array(
    'access inventories' =>  array(
      'title' => t('can view inventories'),
    ),
    'create inventories' =>  array(
      'title' => t('can create inventories'),
    ),
  );
}

/**
 * Check write acces to inventory
 * 
 * @param unknown_type $inventoryId
 * @return true if access ok, false if not
 */
function inventory_edit_access($inventoryId) {
	$access = user_access('access inventories');
	// check if this user has write access to the inventory
	global $user;
	$adminRecords = db_query('
		SELECT id FROM head_inventory hi
		LEFT JOIN sgroup_inventory sgi ON sgi.hiid = hi.id
		LEFT JOIN sgroup_users sgu ON sgi.sgid = sgu.sgid
		WHERE (sgu.uid = :uid AND sgi.hiid = :hiid AND sgi.write = 1)
		OR (hi.owner_id = :uid AND hi.id = :hiid)
		ORDER BY write DESC LIMIT 1',
		array(':hiid' => $inventoryId, ':uid' => $user->uid)
	);
	$write = $adminRecords->fetch();
	$access = $access && $write && $write->id == $inventoryId;
	return $access;
}

/**
 * Check read acces to inventory
 * 
 * @param unknown_type $inventoryId
 * @return true if access ok, false if not
 */
function inventory_access($inventoryId) {
	$access = user_access('access inventories');
	// check if this user has read access to the inventory or the inventory is public
	global $user;
	$adminRecords = db_query('
		SELECT sgi.read, hi.shared, id, hi.owner_id 
		FROM head_inventory hi
		LEFT JOIN sgroup_inventory sgi ON sgi.hiid = hi.id
		LEFT JOIN sgroup_users sgu ON sgi.sgid = sgu.sgid
		WHERE (sgu.uid = :uid AND sgi.hiid = :hiid AND sgi.read = 1)
		OR (hi.owner_id = :uid AND hi.id = :hiid)
		OR (hi.shared = true AND hi.id = :hiid)
		ORDER BY write DESC LIMIT 1;', array(':hiid' => $inventoryId, ':uid' => $user->uid)
	);
	$read = $adminRecords->fetch();
	$access = $access && (($read->read == 1) || ($read->shared == true)) || ($read->owner_id == $user->uid);
	return $access;
}

?>