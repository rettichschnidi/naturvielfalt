<?php
/**********************************
 *  Hook implementations
 *********************************/

module_load_include('inc', 'inventory');

// Load gallery integration
module_load_include('inc', 'inventory', 'inventory.gallery');

/**
 * Implements hook_menu()
 *
 * @return array
 */
function inventory_menu() {
  $items['inventory'] = array(
    'title' => t('Inventories'),
    'description' => t('Show all inventories'),
    'page callback' => 'inventory_list',
    'access arguments' => array('access inventories'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'inventory.list.inc',
  );
  $items['inventory/%'] = array(
    'title' => t('Show Inventory'),
    'description' => t('View an existing inventory'),
    'page callback' => 'inventory_show',
    'page arguments' => array(1),
    'access callback' => 'inventory_access',
    'access arguments' => array(1),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'inventory.show.inc',
  );
  $items['inventory/%/normal'] = array(
    'title' => t('View'),
    'description' => t('View of the inventory'),
    'page callback' => 'inventory_show',
    'page arguments' => array(1),
    'access callback' => 'inventory_access',
    'access arguments' => array(1),
    'type' => MENU_DEFAULT_LOCAL_TASK | MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'inventory.show.inc',
    'weight' => 1,
  );
  $items['inventory/%/gallery'] = array(
    'title' => t('Gallery'),
    'description' => t('View the inventory as gallery of organisms'),
    'page callback' => 'inventory_gallery',
    'page arguments' => array(1),
    'access callback' => 'inventory_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'inventory.show.inc',
    'weight' => 2,
  );
  $items['inventory/%/list'] = array(
    'title' => t('List'),
    'description' => t('View the inventory as a list of organisms'),
    'page callback' => 'inventory_list',
    'page arguments' => array(1),
    'access callback' => 'inventory_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'inventory.show.inc',
    'weight' => 3,
  );
  $items['inventory/%/entry_location/%'] = array(
    'title' => t('Entry location'),
    'description' => t('Displays the location of the inventory entry'),
    'page callback' => 'inventory_entry_location',
    'page arguments' => array(1, 3),
    'access callback' => 'inventory_access',
    'access arguments' => array(1),
    'file' => 'inventory.show.inc',
    'weight' => 3,
  );
  $items['inventory/%/entry_locations'] = array(
    'title' => 'Entry locations',
    'page callback' => 'inventory_entry_locations',
    'page arguments' => array(1),
    'access callback' => 'inventory_access',
    'access arguments' => array(1),
    'file' => 'inventory.show.inc',
    'weight' => 3,
  );
  $items['inventory/%/delete_inventory'] = array(
    'title' => t('Delete'),
    'description' => t('Delete an existing inventory'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inventory_delete', 1),
    'access callback' => 'inventory_delete_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'inventory.edit.inc',
    'weight' => 11,
  );
  $items['inventory/edit'] = array(
    'title' => t('Edit Inventories'),
    'description' => t('Show all inventories to edit'),
    'page callback' => 'inventory_editable',
    'access arguments' => array('access inventories'),
    'file' => 'inventory.list.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 5,
  );
  $items['inventory/new/area/%'] = array(
  'title' => t('Create Inventory'),
    'description' => t('Create a new inventory'),
    'page callback' => 'inventory_new',
    'page arguments' => array(3),
    'access arguments' => array('access inventories'),
    'file' => 'inventory.new.inc',
    'weight' => 0,
  );
  
  // Inventory edit form
  $items['inventory/%/edit'] = array(
    'title' => t('Edit'),
    'description' => t('Edit an existing inventory'),
    'page callback' => 'inventory_edit',
    'page arguments' => array(1),
    'access callback' => 'inventory_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'inventory.edit.inc',
    'weight' => 10,
  );
  $items['inventory/%/delete_file/%'] = array(
    'title' => t('Delete file'),
    'description' => t('Delete an existing file'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inventory_delete_file', 1, 3),
    'access callback' => 'inventory_edit_access',
    'access arguments' => array(1),
    'file' => 'inventory.edit.inc',
    'weight' => 10,
  );
  $items['inventory/%/delete_entry/%'] = array(
    'title' => t('Delete an entry'),
    'description' => t('Deletes an entry of an existing inventory'),
    'page callback' => 'inventory_delete_entry',
    'page arguments' => array(1, 3),
    'access callback' => 'inventory_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.edit.inc',
  );
  $items['inventory/%/save_entries'] = array(
    'title' => t('Save inventory entries'),
    'description' => t('Save an inventory\'s entries'),
    'page callback' => 'inventory_save_entries',
    'page arguments' => array(1),
    'access callback' => 'inventory_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.edit.inc',
  );
  $items['inventory/%/edit_entry/%/%'] = array(
    'title' => t('Edit additional fields of an inventory entry'),
    'description' => t('Edit additional fields of an inventory entry'),
    'page callback' => 'inventory_edit_entry',
    'page arguments' => array(1, 3, 4),
    'access callback' => 'inventory_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.edit.inc',
  );
  $items['inventory/%/edit_entry_location/%'] = array(
    'title' => t('Edit location of an inventory entry'),
    'description' => t('Edit location of an inventory entry'),
    'page callback' => 'inventory_edit_entry_location',
    'page arguments' => array(1, 3),
    'access callback' => 'inventory_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.edit.inc',
  );
  $items['inventory/%/add_inventory_group/%/%'] = array(
    'title' => t('Return inventory group'),
    'description' => t('Returns the html for a new inventory group'),
    'page callback' => 'inventory_add_inventory_group',
    'page arguments' => array(1, 3, 4),
    'access callback' => 'inventory_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.edit.inc',
  );
  $items['inventory/%/custom_fields/%'] = array(
    'title' => t('Custom fields'),
    'description' => t('Add and edit custom fields of an inventory'),
    'page callback' => 'inventory_custom_fields',
    'page arguments' => array(1, 3),
    'access callback' => 'inventory_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.edit.inc',
  );
  $items['inventory/%/templates'] = array(
    'title' => t('Add organisms from template'),
    'description' => t('Import organisms from a template, inventory or habitat'),
    'page callback' => 'inventory_templates',
    'page arguments' => array(1),
    'access callback' => 'inventory_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.edit.inc',
  );
  $items['inventory/%/template_autocomplete'] = array(
    'title' => 'Template Autocomplete',
    'description' => 'JSON Template Autocomplete',
    'page callback' => 'inventory_template_autocomplete',
    'page arguments' => array(1),
    'access callback' => 'inventory_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.edit.inc',
  );
  $items['inventory/%/inventory_autocomplete'] = array(
    'title' => 'Inventory Autocomplete',
    'description' => 'JSON Inventory Autocomplete',
    'page callback' => 'inventory_inventory_autocomplete',
    'page arguments' => array(1),
    'access callback' => 'inventory_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.edit.inc',
  );
  $items['inventory/%/public_inventory_autocomplete'] = array(
    'title' => 'Public Inventory Autocomplete',
    'description' => 'JSON Public Inventory Autocomplete',
    'page callback' => 'inventory_public_inventory_autocomplete',
    'page arguments' => array(1),
    'access callback' => 'inventory_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.edit.inc',
  );
  $items['inventory/%/habitat_autocomplete'] = array(
    'title' => 'Habitat Autocomplete',
    'description' => 'JSON Habitat Autocomplete',
    'page callback' => 'inventory_habitat_autocomplete',
    'page arguments' => array(1),
    'access callback' => 'inventory_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.edit.inc',
  );
  $items['inventory/organism_autocomplete'] = array(
    'title' => 'Organism Autocomplete',
    'description' => 'JSON Organism Autocomplete',
    'page callback' => 'inventory_organism_autocomplete',
    'access arguments' => array('access inventories'),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.edit.inc',
  );
  $items['inventory/get_entry_image/%'] = array(
    'title' => t('Get entry image'),
    'description' => t('Returns the html for an inventory entry\'s image'),
    'page callback' => 'inventory_get_entry_image',
    'page arguments' => array(2),
    'access arguments' => array('access inventories'),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.edit.inc',
  );
  $items['inventory/%/sgroup_autocomplete'] = array(
    'title' => 'sgroup autocomplete',
    'page callback' => 'inventory_sgroup_autocomplete',
    'access callback' => 'inventory_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.edit.inc',
  );
  $items['inventory/%/delete_sgroup/%'] = array(
    'title' => 'JSON request to delete a group from permission list',
    'page callback' => 'inventory_delete_sgroup',
    'page arguments' => array(1, 3),
    'access callback' => 'inventory_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.edit.inc',
  );
  
  // Single observations
  $items['user/%user/singleobservations'] = array(
    'title' => t('Single observations'),
    'description' => t('View single observations'),
    'page callback' => 'inventory_single_show',
    'page arguments' => array(1),
    'access callback' => 'inventory_single_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'inventory.single.inc',
    'weight' => 2,
  );
  $items['user/%user/singleobservations/normal'] = array(
    'title' => t('View'),
    'description' => t('View single observations'),
    'page callback' => 'inventory_single_show',
    'access callback' => 'inventory_single_access',
    'access arguments' => array(1),
    'type' => MENU_DEFAULT_LOCAL_TASK | MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'inventory.single.inc',
    'weight' => 1,
  );
  $items['user/%user/singleobservations/gallery'] = array(
    'title' => t('Gallery'),
    'description' => t('View the inventory as gallery of organisms'),
    'page callback' => 'inventory_single_gallery',
    'page arguments' => array(1),
    'access callback' => 'inventory_single_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'inventory.single.inc',
    'weight' => 2,
  );
  $items['user/%user/singleobservations/list'] = array(
    'title' => t('List'),
    'description' => t('View the inventory as a list of organisms'),
    'page callback' => 'inventory_single_list',
    'page arguments' => array(1),
    'access callback' => 'inventory_single_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'inventory.single.inc',
    'weight' => 3,
  );
  $items['singleobservations'] = array(
    'title' => t('Single observations'),
    'description' => t('View single observations'),
    'page callback' => 'inventory_single_current_show',
    'access arguments' => array('create inventories'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'inventory.single.inc',
  );
  $items['singleobservations/normal'] = array(
    'title' => t('View'),
    'description' => t('View single observations'),
    'page callback' => 'inventory_single_current_show',
    'access arguments' => array('create inventories'),
    'type' => MENU_DEFAULT_LOCAL_TASK | MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'inventory.single.inc',
    'weight' => 1,
  );
  $items['singleobservations/gallery'] = array(
    'title' => t('Gallery'),
    'description' => t('View the inventory as gallery of organisms'),
    'page callback' => 'inventory_single_current_gallery',
    'access arguments' => array('create inventories'),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'inventory.single.inc',
    'weight' => 2,
  );
  $items['singleobservations/list'] = array(
    'title' => t('List'),
    'description' => t('View the inventory as a list of organisms'),
    'page callback' => 'inventory_single_current_list',
    'access arguments' => array('create inventories'),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'inventory.single.inc',
    'weight' => 3,
  );
  
  // Single observations edit form
  $items['user/%user/singleobservations/edit'] = array(
    'title' => t('Edit'),
    'description' => t('Edit single observations'),
    'page callback' => 'inventory_single_edit',
    'page arguments' => array(1),
    'access callback' => 'inventory_single_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'inventory.single.inc',
    'weight' => 10,
  );
  $items['user/%user/singleobservations/delete_entry/%'] = array(
    'title' => t('Delete an entry'),
    'description' => t('Deletes an entry of an existing inventory'),
    'page callback' => 'inventory_single_delete_entry',
    'page arguments' => array(1, 4),
    'access callback' => 'inventory_single_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.single.inc',
  );
  $items['user/%user/singleobservations/save_entries'] = array(
    'title' => t('Save inventory entries'),
    'description' => t('Save an inventory\'s entries'),
    'page callback' => 'inventory_single_save_entries',
    'page arguments' => array(1),
    'access callback' => 'inventory_single_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.single.inc',
  );
  $items['user/%user/singleobservations/add_inventory_group/%/%'] = array(
    'title' => t('Return inventory group'),
    'description' => t('Returns the html for a new inventory group'),
    'page callback' => 'inventory_single_add_inventory_group',
    'page arguments' => array(1, 4, 5),
    'access callback' => 'inventory_single_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.single.inc',
  );
  $items['singleobservations/edit'] = array(
    'title' => t('Edit'),
    'description' => t('Edit single observations'),
    'page callback' => 'inventory_single_current_edit',
    'access arguments' => array('create inventories'),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'inventory.single.inc',
    'weight' => 10,
  );
  $items['singleobservations/delete_entry/%'] = array(
    'title' => t('Delete an entry'),
    'description' => t('Deletes an entry of an existing inventory'),
    'page callback' => 'inventory_single_current_delete_entry',
    'page arguments' => array(2),
    'access arguments' => array('create inventories'),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.single.inc',
  );
  $items['singleobservations/save_entries'] = array(
    'title' => t('Save inventory entries'),
    'description' => t('Save an inventory\'s entries'),
    'page callback' => 'inventory_single_current_save_entries',
    'access arguments' => array('create inventories'),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.single.inc',
  );
  $items['singleobservations/add_inventory_group/%/%'] = array(
    'title' => t('Return inventory group'),
    'description' => t('Returns the html for a new inventory group'),
    'page callback' => 'inventory_single_current_add_inventory_group',
    'page arguments' => array(2, 3),
    'access arguments' => array('create inventories'),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.single.inc',
  );
  
  $items['inventorytemplate'] = array(
    'title' => t('Templates'),
    'description' => t('List of existing inventory templates'),
    'page callback' => 'inventory_template_list',
    'access arguments' => array('access inventories'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'inventory.template.inc'
  );
  $items['inventorytemplate/list'] = array(
    'title' => t('Available templates'),
    'description' => t('List of existing inventory templates'),
    'page callback' => 'inventory_template_list',
    'access arguments' => array('access inventories'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE,
    'file' => 'inventory.template.inc',
    'weight' => 1
  );
  $items['inventorytemplate/new'] = array(
    'title' => t('Create new template'),
    'description' => t('Form to create a new inventory template'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inventory_template_edit_metadata'),
    'access arguments' => array('access inventories'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE,
    'file' => 'inventory.template.inc',
    'weight' => 2
  );
  $items['inventorytemplate/%'] = array(
    'title' => t('View'),
    'description' => t('View an existing inventory template'),
    'page callback' => 'inventory_template_show',
    'page arguments' => array(1),
    'access callback' => 'inventory_template_access',
    'access arguments' => array(1),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'inventory.template.inc'
  );
  $items['inventorytemplate/%/normal'] = array(
    'title' => t('View'),
    'description' => t('View an existing inventory template'),
    'page callback' => 'inventory_template_show',
    'page arguments' => array(1),
    'access callback' => 'inventory_template_access',
    'access arguments' => array(1),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE,
    'file' => 'inventory.template.inc'
  );
  
  // Inventory template edit form
  $items['inventorytemplate/%/edit'] = array(
    'title' => t('Edit'),
    'description' => t('Edit an existing inventory template'),
    'page callback' => 'inventory_template_edit',
    'page arguments' => array(1),
    'access callback' => 'inventory_template_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE,
    'file' => 'inventory.template.inc'
  );
  $items['inventorytemplate/%/delete'] = array(
    'title' => t('Delete'),
    'description' => t('Delete an inventory template'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inventory_template_delete_form', 1),
    'access callback' => 'inventory_template_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE,
    'file' => 'inventory.template.inc'
  );
  $items['inventorytemplate/%/delete_entry/%'] = array(
    'title' => t('Delete an entry'),
    'description' => t('Deletes an entry of an existing inventory template'),
    'page callback' => 'inventory_template_delete_entry',
    'page arguments' => array(1, 3),
    'access callback' => 'inventory_template_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.template.inc',
  );
  $items['inventorytemplate/%/save_entries'] = array(
    'title' => t('Save inventory entries'),
    'description' => t('Save an inventory template\'s entries'),
    'page callback' => 'inventory_template_save_entries',
    'page arguments' => array(1),
    'access callback' => 'inventory_template_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.template.inc',
  );
  $items['inventorytemplate/%/add_inventory_group/%/%'] = array(
    'title' => t('Return inventory group'),
    'description' => t('Returns the html for a new inventory group'),
    'page callback' => 'inventory_template_add_inventory_group',
    'page arguments' => array(1, 3, 4),
    'access callback' => 'inventory_template_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.template.inc',
  );
  //Inventory protection lists
  $items['protection_lists'] = array(
    'title' => t('Protection lists'),
    'description' => t('List of existing protection lists'),
    'page callback' => 'inventory_protection_list',
    'access arguments' => array('access inventories'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'inventory.custom.protection.inc'
  );
  $items['protection_lists/list'] = array(
    'title' => t('Available protection lists'),
    'description' => t('List of existing protection lists'),
    'page callback' => 'inventory_protection_list',
    'access arguments' => array('access inventories'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE,
    'file' => 'inventory.custom.protection.inc',
    'weight' => 1
  );
  $items['protection_lists/new'] = array(
    'title' => t('Create new protection list'),
    'description' => t('Form to create a new protection list'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inventory_protection_edit_metadata'),
    'access arguments' => array('manage protection lists'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE,
    'file' => 'inventory.custom.protection.inc',
    'weight' => 2
  );
  $items['protection_lists/%'] = array(
    'title' => t('View'),
    'description' => t('View an existing protection list'),
    'page callback' => 'inventory_protection_show',
    'page arguments' => array(1),
    //'access callback' => 'inventory_protection_access',
    'access arguments' => array('access inventories'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'inventory.custom.protection.inc'
  );
  $items['protection_lists/%/normal'] = array(
    'title' => t('View'),
    'description' => t('View an existing protection list'),
    'page callback' => 'inventory_protection_show',
    'page arguments' => array(1),
   // 'access callback' => 'inventory_protection_access',
    'access arguments' => array('access inventories'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE,
    'file' => 'inventory.custom.protection.inc'
  );
    $items['protection_lists/category/%'] = array(
    'title' => t('View protected organisms by category'),
    'description' => t('View protected organisms by category'),
    'page callback' => 'inventory_protection_category_show',
    'page arguments' => array(2),
    'access arguments' => array('access inventories'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE,
    'file' => 'inventory.custom.protection.inc',
    'weight' => 2
  );
  
  // Inventory protection edit form
  $items['protection_lists/%/edit'] = array(
    'title' => t('Edit'),
    'description' => t('Edit an existing protection list'),
    'page callback' => 'inventory_protection_edit',
    'page arguments' => array(1),
    //'access callback' => 'inventory_protection_edit_access',
    'access arguments' => array('manage protection lists'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE,
    'file' => 'inventory.custom.protection.inc'
  );
  $items['protection_lists/%/delete'] = array(
    'title' => t('Delete'),
    'description' => t('Delete a protection list'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inventory_protection_delete_form', 1),
    //'access callback' => 'inventory_protection_edit_access',
    'access arguments' => array('manage protection lists'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE,
    'file' => 'inventory.custom.protection.inc'
  );
  $items['protection_lists/%/delete_entry/%'] = array(
    'title' => t('Delete an entry'),
    'description' => t('Deletes an entry of an existing protection list'),
    'page callback' => 'inventory_protection_delete_entry',
    'page arguments' => array(1, 3),
    //'access callback' => 'inventory_protection_edit_access',
    'access arguments' => array('manage protection lists'),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.custom.protection.inc',
  );
  $items['protection_lists/%/save_entries'] = array(
    'title' => t('Save inventory entries'),
    'description' => t('Save an inventory protection list\'s entries'),
    'page callback' => 'inventory_protection_save_entries',
    'page arguments' => array(1),
    //'access callback' => 'inventory_protection_edit_access',
    'access arguments' => array('manage protection lists'),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.custom.protection.inc',
  );
  $items['protection_lists/%/add_inventory_group/%/%'] = array(
    'title' => t('Return inventory group'),
    'description' => t('Returns the html for a new inventory group'),
    'page callback' => 'inventory_protection_add_inventory_group',
    'page arguments' => array(1, 3, 4),
    //'access callback' => 'inventory_protection_edit_access',
    'access arguments' => array('manage protection lists'),
    'type' => MENU_CALLBACK,
    'file' => 'inventory.custom.protection.inc',
  );
  return $items;
}

/**
 * Helper function to get a list of inventory entry ids to exclude
 * for the current user since they are on a red list
 * 
 * @return array 
 *  List of inventory entry ids to exclude for the current user
 * @param object $head_inventory_id[optional]
 *  Only return the ids of the specified head inventory
 * @param object $inventory_id[optional]
 *  Only return the ids of the specified inventory
 */
function inventory_redlisted_entries($head_inventory_id=false, $inventory_id=false) {
  global $user;
  $query = db_select('inventory_entry', 'ie');
  $query->join('inventory', 'i', 'i.id = ie.inventory_id');
  $query->join('head_inventory', 'hi', 'hi.id = i.head_inventory_id');
  $query->join('organism', 'o', 'o.id = ie.organism_id');
  $query->leftJoin('fauna_organism', 'fauna', 'fauna.id = o.organism_id');
  $query->leftJoin('flora_organism', 'flora', 'flora.id = o.organism_id');
  $query->leftJoin('flora_red_list', 'frl', 'frl.flora_organism_id = o.organism_id');
  if($inventory_id)
    $query->condition('i.id', $inventory_id);
  if($head_inventory_id)
    $query->condition('hi.id', $head_inventory_id);
  $query->condition(db_and()
    ->condition(db_and()
      ->condition('hi.owner_id', $user->uid, '!=')
      ->where('NOT EXISTS ('.
        'SELECT sgu.uid FROM '.
          '{sgroup_users} sgu '.
        'INNER JOIN {sgroup_inventory} sgi ON sgi.sgid = sgu.sgid '.
        'WHERE sgi.show_red = 1 AND sgi.hiid = hi.id AND sgu.uid = :uid)', array(':uid' => $user->uid)))
    ->condition(db_or()
      ->condition(db_and()
        ->condition('fauna.protection_ch', '0', '>')
        ->condition('o.organism_type', '1'))
      ->condition(db_and()
        ->condition('frl.red_list_ch', '0', '>')
        ->condition('o.organism_type', '2'))));
  $query->addField('ie', 'id');
  $result = $query->execute();
  $protected = array();
  foreach($result as $record)
    array_push($protected, $record->id);
  return $protected;
}

/**
 * Check if user is allowed to display red list organisms -> either by owning the inventory or group permissions
 * 
 * @return boolean
 * @param object $head_inventory_id
 */
function inventory_user_has_redlist_permission($head_inventory_id) {
  global $user;
  //query group membership of user
  $query = db_select('head_inventory', 'hi');
  $query->condition('hi.id', $head_inventory_id);
  $query->condition(db_or()
    ->condition('hi.owner_id', $user->uid)
    ->where('EXISTS ('.
              'SELECT sgu.uid FROM '.
                '{sgroup_users} sgu '.
              'INNER JOIN {sgroup_inventory} sgi ON sgi.sgid = sgu.sgid '.
              'WHERE sgi.show_red = 1 AND sgi.hiid = hi.id AND sgu.uid = :uid)', array(':uid' => $user->uid)));
  $query->addField('hi', 'id');
  return $query->execute()->rowCount() > 0;
}

/**
 * Default permission function
 * 
 */
function inventory_permission() {
  return array(
    'access inventories' =>  array(
      'title' => t('can view inventories'),
    ),
    'create inventories' =>  array(
      'title' => t('can create inventories'),
    ),
    'manage protection lists' => array(
      'title' => t('can manage protection lists'),
    ),
  );
}

/**
 * Check delete access to inventory
 * 
 * @param int $head_inventory_id
 * @return true if access ok, false if not
 */
function inventory_delete_access($head_inventory_id) {
  global $user;
  $owner = db_select('head_inventory', 'hi')
    ->condition('hi.id', $head_inventory_id)
    ->condition('hi.owner_id', $user->uid)
    ->fields('hi', array('id'))
    ->execute();
  return $owner->rowCount() > 0;
}

/**
 * Check write access to inventory
 * 
 * @param int $head_inventory_id
 * @return true if access ok, false if not
 */
function inventory_edit_access($head_inventory_id) {
  if(!user_access('access inventories') || !$head_inventory_id)
    return false;
  // check if this user has write access to the inventory
  global $user;
  $adminRecords = db_query('
    SELECT id FROM head_inventory hi
    LEFT JOIN sgroup_inventory sgi ON sgi.hiid = hi.id
    LEFT JOIN sgroup_users sgu ON sgi.sgid = sgu.sgid
    WHERE (sgu.uid = :uid AND sgi.hiid = :hiid AND sgi.write = 1)
    OR (hi.owner_id = :uid AND hi.id = :hiid)
    ORDER BY write DESC LIMIT 1',
    array(':hiid' => $head_inventory_id, ':uid' => $user->uid)
  );
  $write = $adminRecords->fetch();
  return $write && $write->id == $head_inventory_id;
}

/**
 * Check write access to the single observations inventory of a specified user
 * 
 * @param int $user
 * @return true if access ok, false if not
 */
function inventory_single_edit_access($user) {
  $head_inventory_id = _inventory_single_get_id($user, false);
  return $head_inventory_id && inventory_edit_access($head_inventory_id);
}

/**
 * Check write acces to inventory template
 * 
 * @param unknown_type $template_id
 * @return true if access ok, false if not
 */
function inventory_template_edit_access($template_id) {
  if(!user_access('access inventories') || !$template_id)
    return false;
  // check if this user has write access to the inventory
  global $user;
  $owner = db_query('
    SELECT id FROM inventory_template t
    WHERE (t.owner_id = :uid AND t.id = :id)
    LIMIT 1',
    array(':id' => $template_id, ':uid' => $user->uid)
  );
  $write = $owner->fetch();
  return $write && $write->id == $template_id;
}

/**
 * Check write acces to protection list. Granted if admin
 * 
 * @return true if access ok, false if not
 */
function inventory_protection_edit_access() {
 global $user;
 $admin = db_query('
   SELECT uid
   FROM users_roles
   WHERE uid = :uid',
   array(':uid' => $user->uid)
 );
 $write = $admin->fetch();
 if(empty($write)) {
 	return FALSE;
 } else {
 	return TRUE;
 }
}

/**
 * Check read access to inventory
 * 
 * @param unknown_type $inventoryId
 * @return true if access ok, false if not
 */
function inventory_access($inventoryId) {
  $access = user_access('access inventories');
  // check if this user has read access to the inventory or the inventory is public
  global $user;
  $adminRecords = db_query('
    SELECT sgi.read, hi.shared, id, hi.owner_id 
    FROM head_inventory hi
    LEFT JOIN sgroup_inventory sgi ON sgi.hiid = hi.id
    LEFT JOIN sgroup_users sgu ON sgi.sgid = sgu.sgid
    WHERE (sgu.uid = :uid AND sgi.hiid = :hiid AND sgi.read = 1)
    OR (hi.owner_id = :uid AND hi.id = :hiid)
    OR (hi.shared = true AND hi.id = :hiid)
    ORDER BY write DESC LIMIT 1;', array(':hiid' => $inventoryId, ':uid' => $user->uid)
  );
  $read = $adminRecords->fetch();
  $access = $access && (($read->read == 1) || ($read->shared == true)) || ($read->owner_id == $user->uid);
  return $access;
}

/**
 * Check read access to the single observations inventory of a specified user
 * 
 * @param int $user
 * @return true if access ok, false if not
 */
function inventory_single_access($user) {
  $head_inventory_id = _inventory_single_get_id($user, false);
  return $head_inventory_id && inventory_access($head_inventory_id);
}

/**
 * Check read access to inventory templates
 * 
 * @param int $template_id
 * @return true if access ok, false if not
 */
function inventory_template_access($template_id) {
  if(!user_access('access inventories'))
    return false;
  // check if this user is the owner of the inventory template or the inventory template is public
  global $user;
  return db_select('inventory_template', 't')
    ->condition('t.id', $template_id)
    ->condition(db_or()
      ->condition('t.public', '1')
      ->condition('t.owner_id', $user->uid))
    ->fields('t')
    ->execute()
    ->rowCount() > 0;
}

/**
 * ...
 * Enter description here ...
 * @param int $head_inventory_id
 * @return name of actual inventory to be modified
 */
function inventory_title($head_inventory_id) {
  return db_select('head_inventory', 'hi')
    ->condition('hi.id', $head_inventory_id)
    ->fields('hi', array('name'))
    ->execute()
    ->fetchField(0);
}

function inventory_export_types() {
  return db_select('export_type', 'et')
    ->fields('et', array('id', 'name'))
    ->orderBy('et.name')
    ->execute()
    ->fetchAllKeyed(0, 1);
}

function inventory_save_export_type($head_inventory_id, $export) {
  $seen = array();
  if(is_array($export))
    foreach($export as $export_type_id) {
      if(!$export_type_id)
        continue;
      $id = db_select('head_inventory_export_type', 'hiet')
        ->condition('hiet.head_inventory_id', $head_inventory_id)
        ->condition('hiet.export_type_id', $export_type_id)
        ->fields('hiet', array('id'))
        ->execute()
        ->fetch();
      if($id) {
        array_push($seen, $id->id);
        continue;
      }
      $entry = array(
        'head_inventory_id' => $head_inventory_id,
        'export_type_id' => $export_type_id
      );
      drupal_write_record('head_inventory_export_type', $entry);
      array_push($seen, $entry['id']);
    }
  $delete = db_delete('head_inventory_export_type')
    ->condition('head_inventory_id', $head_inventory_id);
  if($seen)
    $delete->condition('id', $seen, 'NOT IN');
  $delete->execute();
}

/**
 * Gets organism table table header
 * @param unknown_type $inventoryId
 */
function inventory_column_description($inventory_id, $type_id=false, $custom_fields=false, $head_inventory_id=false) {
  $invColDesc = array();

  if($type_id) {
    $inventory = db_query('
      SELECT t.name, t.id 
      FROM inventory_type t 
      WHERE t.id = :id
      LIMIT 1', 
      array(':id' => $type_id)
    )->fetch();
  } else {
    $inventory = db_query('
      SELECT t.name, i.inventory_type_id id 
      FROM inventory i 
      LEFT JOIN inventory_type t ON i.inventory_type_id = t.id 
      WHERE i.id = :id
      LIMIT 1', 
      array(':id' => $inventory_id)
    )->fetch();
  }
  $type_id = $inventory->id;
  $invColDesc["name"] = $inventory->name;
  $invColDesc["id"] = $inventory->id;
  
  $inventory = 'a.head_inventory_id IS NULL';
  if($head_inventory_id && $custom_fields)
    $inventory = '('.$inventory.' OR a.head_inventory_id = '.intval($head_inventory_id).')';
  $resAttributes = db_query('SELECT a.id, a.name, a.visible, a.head_inventory_id, f.format
    FROM inventory_type_attribute a 
    LEFT JOIN attribute_format f ON a.attribute_format_id = f.id 
    WHERE (a.inventory_type_id = :typeId OR a.inventory_type_id IS NULL) AND '.$inventory, array(':typeId' => $type_id));

  $i = 0;
  foreach ($resAttributes as $attribute) {
    $i++;
    $invColDesc["cols"][$i] = array(
      "name" => $attribute->name,
      "id" => $attribute->id,
      "format" => $attribute->format,
      "visible" => $attribute->visible,
      "head_inventory_id" => $attribute->head_inventory_id,
    );

    // If it is a dropdown list
    if($attribute->format == "dropdown") {
      $invColDesc["cols"][$i]["dropdown_values"] = array();
      $dropdownValues = db_query('SELECT * FROM inventory_type_attribute_dropdown_value WHERE inventory_type_attribute_id = :id', array(':id' => $attribute->id));
      foreach($dropdownValues as $dropdownValue) {
        array_push($invColDesc["cols"][$i]["dropdown_values"], array("id" =>$dropdownValue->id, "value" => $dropdownValue->value));
      }
    }

  }
  return $invColDesc;
}

function inventory_data($head_inventory_id, $order=false, $extended=false, $entry_id=false, $custom_fields=false, $columns=true, $combined=false) {
  $invArr = array();
  if($entry_id)
    $inventories = db_query('SELECT inventory_id id
                FROM inventory_entry 
                WHERE id = :id;', 
                array(':id' => $entry_id)
                );
  else
    $inventories = db_query('SELECT id, inventory_type_id
                FROM inventory 
                WHERE head_inventory_id = :id;', 
                array(':id' => $head_inventory_id)
                );
  
  $protected = inventory_redlisted_entries($head_inventory_id);
  
  foreach($inventories as $inventory) {
    $id = $combined && !$entry_id ? $inventory->inventory_type_id : $inventory->id;
    
    $entries = inventory_type_entries($inventory->id, 'inventory_entry', 'inventory_id', $order, $extended, $entry_id, $protected, $columns);
    if(!array_key_exists($id, $invArr))
      $invArr[$id] = $entries;
    else
      $invArr[$id] = array_merge($invArr[$id], $entries);
    
    // Get the inventory column description
    if(!array_key_exists('invDesc', $invArr[$id]))
      $invArr[$id]["invDesc"] = inventory_column_description($inventory->id, false, $custom_fields, $head_inventory_id);
  }
  return $invArr;
}

function inventory_type_entries($id, $table, $relation, $order=false, $extended=false, $entry_id=false, $protected=false, $columns=true, $include_id=true) {
  if(!$order)
    $order = 'e.id ASC';
  if(is_array($id)) {
  	$prot_level = $id['protection_level'];
  	$id = $id['inv_id'];
  }
  $sql = 'SELECT 
      '.($include_id ? 'e.id,' : '').'
      '.($table == 'inventory_entry' ? 'ST_AsGeoJSON(e.geom) AS geom, ': '').'
      e.organism_id, 
      fauna.name_de faunanamede, 
      fauna.genus, 
      fauna.species, 
      fauna.sub_species, 
      fauna.family, 
      o.organism_type, 
      flora.name_de floranamede, 
      flora.name floraname, 
      flora."Familie" florafamilie, 
      flora."Gattung" floragattung, 
      flora."Art" floraart, 
      flora."Rang" florarang, 
      flora."NameUnterart" floraunterart 
    FROM '.$table.' e
    LEFT JOIN organism o on e.organism_id = o.id
    LEFT JOIN fauna_organism fauna ON o.organism_id = fauna.id
    LEFT JOIN flora_organism flora ON o.organism_id = flora.id
    WHERE e.'.$relation.' = :id '.
    ($prot_level ? 
      'AND protection_level = '.$prot_level.' ':''
    ).
    ($entry_id ? 
      'AND e.id = '.intval($entry_id).' ' : 
      ($protected?'AND NOT e.id IN ('.implode(', ', $protected).') ':'')
    ).
    'ORDER BY '.$order.';'; 
  $inventoryEntries = db_query($sql ,array(':id' => $id));
  $entries = array();
  
  foreach($inventoryEntries as $inventoryEntry) {
    $entry = inventory_entry_factory($inventoryEntry, $extended);
    if ($table == 'inventory_entry') {
        $json = json_decode($inventoryEntry->geom);
        if ($json) {
            if ('Point' == $json->type) {
                $entry['location'] = $json->coordinates[1] . ',' . $json->coordinates[0];
            }
        }
    }
    if($columns) {
      if($columns == 'protection_level') {
      	$column = db_query('
      	  SELECT protection_level
      	  FROM inventory_custom_protection_inventory_entry
      	  WHERE id = :id',
      	  array(':id' => $inventoryEntry->id));
      	$column = $column->fetch();
      	$entry["col_0"] = isset($column->protection_level) ? $column->protection_level.'_dropdown' : "";
      }
      // Get inventory columns
      $columns = db_query('
        SELECT * 
        FROM inventory_type_attribute_inventory_entry 
        WHERE inventory_entry_id = :id', array(':id' => $inventoryEntry->id)); 
        foreach ($columns as $column) {
          // Dropdown
          $colVal = "";
          if($column->inventory_type_attribute_dropdown_value_id > 0) {
            $colVal = $column->inventory_type_attribute_dropdown_value_id.'_dropdown';
          } else {
            $colVal = $column->value;
          }
          $entry["col_".$column->inventory_type_attribute_id] = isset($colVal) ? $colVal : "";
        }
    }
    $entries[] = $entry;
  }
  return $entries;
}

function inventory_entry_factory($inventoryEntry, $extended) {
  $entry = array(
    'id' => $inventoryEntry->id,
    'orgId' => $inventoryEntry->organism_id
  );
  
  if($inventoryEntry->organism_type==1){
    // organism_type 1 is Fauna
    $entry["label"] = $inventoryEntry->faunanamede;
    $entry["label_latin_short"] = trim($inventoryEntry->genus." ".$inventoryEntry->species." ".$inventoryEntry->sub_species);
    if($extended)
      $entry["label_latin"] = trim($inventoryEntry->family." ".$inventoryEntry->genus." ".$inventoryEntry->species." ".$inventoryEntry->sub_species);
    else
      $entry["label_latin"] = $entry["label_latin_short"];
    $entry["label_family"] = $inventoryEntry->family;
  } else {
    // organism_type 2 is Flora
    $entry["label"] = $inventoryEntry->floranamede;
    $entry["label_latin_short"] = trim($inventoryEntry->floragattung." ".$inventoryEntry->floraart." ".$inventoryEntry->florarang." ".$inventoryEntry->floraunterart);
    if($extended)
      $entry["label_latin"] = trim($inventoryEntry->floraname);
    else
      $entry["label_latin"] = $entry["label_latin_short"];
    $entry["label_family"] = $inventoryEntry->florafamilie;
  }
  return $entry;
}

function inventory_entry_map($form, &$form_state, $head_inventory_id, $entry_id) {
  area_add_gmap_resources(false, false);
  _include_js_and_css();
  
  $lat = '';
  $lng = '';
  if($entry_id) {
    $select = db_select('inventory_entry', 'e')->condition('e.id', $entry_id);
    $select->addExpression('ST_AsGeoJSON(e.geom)', 'geom');
    $location = $select->execute()->fetchField(0);
    $json = json_decode($location);
    if ($json) {
      if ('Point' == $json->type) {
        $lat = $json->coordinates[1];
        $lng = $json->coordinates[0];
      }
    }
  }
  if(array_key_exists('lat', $_REQUEST))
    $lat = floatval($_REQUEST['lat']);
  if(array_key_exists('lng', $_REQUEST))
    $lng = floatval($_REQUEST['lng']);
  
  $form['map'] = area_map(db_select('head_inventory', 'hi')
    ->condition('hi.id', $head_inventory_id)
    ->fields('hi', array('area_id'))
    ->execute()
    ->fetchField(0), 'map_location', '', $lat || $lng ? $lat.','.$lng : false);
  
  $form['lat'] = array(
    '#type' => 'hidden',
    '#default_value' => $lat
  );
  $form['lng'] = array(
    '#type' => 'hidden',
    '#default_value' => $lng
  );
  
  return $form;
}

function _inventory_single_get_id($user) {
  $head_inventory_id = db_select('head_inventory', 'hi')
    ->condition('hi.hidden', 'TRUE')
    ->condition('hi.owner_id', $user->uid)
    ->fields('hi', array('id'))
    ->execute()
    ->fetchField(0);
  if(!$head_inventory_id) {
    $area_id = db_select('area', 'a')
      ->condition('a.hidden', 'TRUE')
      ->fields('a', array('id'))
      ->execute()
      ->fetchField(0);
    if(!$area_id) {
      $area_id = db_insert('area')->fields(array(
        'field_name' => 'Hidden area',
        'locality' => 'locality',
        'zip' => 'zip',
        'canton' => 'canton',
        'country' => 'country',
        'type_id' => 1,
        'altitude' => 1,
        'surface_area' => 1,
        'township' => 'township',
        'create_time' => 'now()',
        'modify_time' => 'now()',
        'hidden' => 'TRUE'
      ))->execute();
    }
    $head_inventory_id = db_insert('head_inventory')->fields(array(
      'area_id' => $area_id,
      'name' => t('Single observations'),
      'owner_id' => $user->uid,
      'shared' => '0',
      'create_time' => 'now()',
      'modify_time' => 'now()',
      'hidden' => 'TRUE'
    ))->execute();
  }
  return $head_inventory_id;
}

function _include_js_and_css() {
  drupal_add_library('system', 'ui.dialog');
  drupal_add_library('system', 'ui.datepicker');
  drupal_add_library('system', 'ui.autocomplete');
  drupal_add_library('system', 'ui.sortable');
  
  drupal_add_js(drupal_get_path('module', 'inventory') . '/js/sgroup.js');
  drupal_add_js(drupal_get_path('module', 'inventory') .'/js/lib/jquery/jquery-texotela-numeric.js');

  drupal_add_js(drupal_get_path('module', 'inventory') .'/js/util.js');
  drupal_add_js(drupal_get_path('module', 'inventory') .'/js/inventory.js');

  drupal_add_css(drupal_get_path('module', 'inventory') . '/css/main.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
  drupal_add_css(drupal_get_path('module', 'inventory') . '/css/sgroup.edit.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
}

function inventory_icon_map($filemime) {

  switch ($filemime) {
    // Word document types.
    case 'application/msword':
    case 'application/vnd.ms-word.document.macroEnabled.12':
    case 'application/vnd.oasis.opendocument.text':
    case 'application/vnd.oasis.opendocument.text-template':
    case 'application/vnd.oasis.opendocument.text-master':
    case 'application/vnd.oasis.opendocument.text-web':
    case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
    case 'application/vnd.stardivision.writer':
    case 'application/vnd.sun.xml.writer':
    case 'application/vnd.sun.xml.writer.template':
    case 'application/vnd.sun.xml.writer.global':
    case 'application/vnd.wordperfect':
    case 'application/x-abiword':
    case 'application/x-applix-word':
    case 'application/x-kword':
    case 'application/x-kword-crypt':
      return 'x-office-document';

      // Spreadsheet document types.
    case 'application/vnd.ms-excel':
    case 'application/vnd.ms-excel.sheet.macroEnabled.12':
    case 'application/vnd.oasis.opendocument.spreadsheet':
    case 'application/vnd.oasis.opendocument.spreadsheet-template':
    case 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
    case 'application/vnd.stardivision.calc':
    case 'application/vnd.sun.xml.calc':
    case 'application/vnd.sun.xml.calc.template':
    case 'application/vnd.lotus-1-2-3':
    case 'application/x-applix-spreadsheet':
    case 'application/x-gnumeric':
    case 'application/x-kspread':
    case 'application/x-kspread-crypt':
      return 'x-office-spreadsheet';

      // Presentation document types.
    case 'application/vnd.ms-powerpoint':
    case 'application/vnd.ms-powerpoint.presentation.macroEnabled.12':
    case 'application/vnd.oasis.opendocument.presentation':
    case 'application/vnd.oasis.opendocument.presentation-template':
    case 'application/vnd.openxmlformats-officedocument.presentationml.presentation':
    case 'application/vnd.stardivision.impress':
    case 'application/vnd.sun.xml.impress':
    case 'application/vnd.sun.xml.impress.template':
    case 'application/x-kpresenter':
      return 'x-office-presentation';

      // Compressed archive types.
    case 'application/zip':
    case 'application/x-zip':
    case 'application/stuffit':
    case 'application/x-stuffit':
    case 'application/x-7z-compressed':
    case 'application/x-ace':
    case 'application/x-arj':
    case 'application/x-bzip':
    case 'application/x-bzip-compressed-tar':
    case 'application/x-compress':
    case 'application/x-compressed-tar':
    case 'application/x-cpio-compressed':
    case 'application/x-deb':
    case 'application/x-gzip':
    case 'application/x-java-archive':
    case 'application/x-lha':
    case 'application/x-lhz':
    case 'application/x-lzop':
    case 'application/x-rar':
    case 'application/x-rpm':
    case 'application/x-tzo':
    case 'application/x-tar':
    case 'application/x-tarz':
    case 'application/x-tgz':
      return 'package-x-generic';

      // Script file types.
    case 'application/ecmascript':
    case 'application/javascript':
    case 'application/mathematica':
    case 'application/vnd.mozilla.xul+xml':
    case 'application/x-asp':
    case 'application/x-awk':
    case 'application/x-cgi':
    case 'application/x-csh':
    case 'application/x-m4':
    case 'application/x-perl':
    case 'application/x-php':
    case 'application/x-ruby':
    case 'application/x-shellscript':
    case 'text/vnd.wap.wmlscript':
    case 'text/x-emacs-lisp':
    case 'text/x-haskell':
    case 'text/x-literate-haskell':
    case 'text/x-lua':
    case 'text/x-makefile':
    case 'text/x-matlab':
    case 'text/x-python':
    case 'text/x-sql':
    case 'text/x-tcl':
      return 'text-x-script';

      // HTML aliases.
    case 'application/xhtml+xml':
      return 'text-html';

      // Executable types.
    case 'application/x-macbinary':
    case 'application/x-ms-dos-executable':
    case 'application/x-pef-executable':
      return 'application-x-executable';

      // PDF
    case 'application/pdf':
      return 'application-pdf';

    default:
      return $return;
  }
}

function inventory_username($uid) {

	$username = db_query('
	  SELECT * 
	  FROM field_data_field_address
	  WHERE entity_id = :uid',
	  array(':uid' => $uid)
	);
	$username = $username->fetch();  
	  
	$uname = $username->field_address_first_name.' '.$username->field_address_last_name;
	return $uname;  
}

?>